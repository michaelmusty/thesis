%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: 32S2-4,4,4-g5-path70-autopp.dvi
%%CreationDate: Fri May  4 14:45:06 2018
%%Pages: 1
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMMI10 CMR7 CMR10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -Ppdf -o 32S2-4,4,4-g5-path70-autopp.ps
%+ 32S2-4,4,4-g5-path70-autopp.dvi
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2018.05.04:1045
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin @defspecial

/preview@version(11.91)def

userdict begin/preview-bop-level 0 def/bop-hook{/preview-bop-level
dup load dup 0 le{/isls false def/vsize 792 def/hsize 612 def}if 1
add store}bind def/eop-hook{/preview-bop-level dup load dup 0 gt{1
sub}if store}bind def end

/preview@tightpage true def (compatibility PostScript comment for dvipng<=1.5

userdict begin/bop-hook{7{currentfile token not{stop}if 65781.76 div
DVImag mul}repeat 72 add 72 2 copy gt{exch}if 4 2 roll neg 2 copy lt{exch}if
dup 0 gt{pop 0 exch}{exch dup 0 lt{pop 0}if}ifelse 720 add exch 720
add 3 1 roll 4{5 -1 roll add 4 1 roll}repeat <</PageSize[5 -1 roll
6 index sub 5 -1 roll 5 index sub]/PageOffset[7 -2 roll [1 1 dtransform
exch]{0 ge{neg}if exch}forall]>>setpagedevice//bop-hook exec}bind def
end

userdict (some extra code to avoid dvipng>=1.6 unknown special: 7{currentfile token not{stop}if 65781.76 div }))
pop

userdict begin/bop-hook{preview-bop-level 0 le{7{currentfile token
not{stop}if 65781.76 div DVImag mul}repeat 72 add 72 2 copy gt{exch}if
4 2 roll neg 2 copy lt{exch}if dup 0 gt{pop 0 exch}{exch dup 0 lt{pop
0}if}ifelse 720 add exch 720 add 3 1 roll 4{5 -1 roll add 4 1 roll}repeat
<</PageSize[5 -1 roll 6 index sub 5 -1 roll 5 index sub]/PageOffset[7
-2 roll [1 1 dtransform exch]{0 ge{neg}if exch}forall]>>setpagedevice}if//bop-hook
exec}bind def end
 
@fedspecial end
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E702C6D29A39C16F7C66E0B2E15DCD2FC36A606C0EC22D1790CFDE6DA7CD418D
D85039E733793041E83EF250DD499477E7AB494E1AA44CC705A5FD535F05B261
2654089FB093C25C18720E3E3C72B00FE7E88EB45B3939415E3709B1E7508787
8B5E21214B74B124B5FE36BC5D810EBE149520CC13156B025DF2E518AA39C1C7
EE84AB0158FB4208CCAA455C3CF06981708E619B5116A10310B9B180DC2074E4
4FFAE3CA1C359295C7D2967195AFD2D94BADCE1E930304DAE34AD74C4F6EE4D8
8F814913C32C56CEEA4630B71E25E517C60BC448891030BAE0D3B1DF3067DEA7
F016221CB34AA4EB20552294F3AEAF6C9C22A817DE43146AE4E04FA79AA91C81
4B18ABD2C5597A11EC057BAEA084D203E197CD50146460DE396AC95850D198A6
6AD2991F011A878BC86753A989AA0B5800E4BE6B9E623761D24C0B7CB02DD90D
C8A2CBBEBFA8F587E6BBC957E31B764127ECC5CD4D1718F1294B62960C845C5A
2B81ECB5A523CB2915A925B1655FC301C72BE097018749375D92AA335837AE28
6EC255135C878B06D9774D944B8F077BFD9BDC2EB03C158F0B4D165480511171
EF9A30D87414ABA2676B03B3060A57AFC433A6E5D42CAB2CD2AB08BA4AE24FEF
2B67CD6C3EBB1C0E4AA0EA12349BEC2C0217289E81B36EEC9DE76321F3DF1B8D
279AD66877E0B05E0220FB8FDE96E8F11832AC295BB1D4ECD9FE817B07AA754B
523AB4F643BFDF588DF93B6925100D074E11C6D288042023656B73B1A1EC29E2
AC3B8B7A0430AEF9BF9DFCBAD0ACFF0F2E068EA70ED2D5CCB9AF9913BBC020A4
106A166B1B624A52ADE7D5B869078828BDF7EF38AF941D66D70C0675919F26D6
96F2A5A3DB8176F9C326B13607C4D2AD083467DFCE3EF958899D7EF260262689
66CD70F84D4CBC3149C444D2BFC6FFFC568810EE75CC001A8D44DF11AC914012
F66C731225B9420BF545DCF033EADDB8887D3DB2F8F5FC91792B97B32ADF930A
9FF05FE9FD570C5289218D585E471C9C3EC14CC670EE8D563CC659E4FEEDA0BD
B6997BCC7ADB0EBA902B2DE3CC959848E590C2EF04663CF953FBDFF9AB4F899A
017252FF9FCD56D1D594EB3808A7B14898276C07D73A209D539A899B48A1D1CB
242260694BC641C156B1C24A28E6C7C8AF7CF499E0121C9A7BA34B7277EE5FA0
09A0EE3D603BEA4173B001B902BD9176D2E877C9D1425DFFDE0AC72699CD940F
9615117E9F357456B934B287967B59BAD929E3E3E5254E82C1AB4000C80CAB2A
D7ACDF2DFE8BB6FEA60D3DA8BBEAB72B6FADD3429C5277D6A0D6E7C35AF7BF31
F66800947CFF7B757C512C8213DC79F8C7F9BB77FEFB9900553A2D6FD8CDE188
3016A9BE748675E49087CE084C9F61D451D10743B05264B21C4EAFC20D922600
78CAFB6412F3EC8A1DEB9844FABE985F922A5773D351FA2E39A58EA63476B41A
D739D0507F13D6DF421D7AF93EE9C1F377CC7CFBCCE5B52441257B033124C9DD
FEC7033B87072A685EE22861B67588DE228EA69D91D022C7E0E5C88120C65424
A3212813EE5D8D68525F0078CB2365966C16C454394D33268483F51AB55246E4
9F5E9E2BB7DDD67C0930D2044F4914F3B7EF86DDFF0AD82C6FFAF8AA0B6CD1DD
6A6437FEB46D0BCD15A0B347D6278467C1D0A712E33407446C53153DAB26003D
259D233FD1AEDBD771DB49CAC0249CBFF5CD5C5DD581AB31D2DAF0BDC96FFCFC
96F62F35E7B6C7D713EC38959DF9AF11D878D9927F60C6A91EE6CA76A5E167F6
1E1108E0AFEDC62B097378535470F3927A278C54B1C9A00F5358856802169160
E6A910BEA8A07DF7CA1A02609780E38ACD24D05AC43EC79B0BF5B620A7DDF395
08A64DF85DD08DF89E00E6C90151C0AB6E02D6EF716C2D25F4CA2B2F440DD6A2
526E693264CA540ED62946EBDA4E671048A5CE9662848090899973E98B9AA250
8BC185629810929997918AD37278D792815AE3C1717F18275C3D03CAFBF6F935
23529E97BCCDEBC4200248CBBB53CF1FD191060F133CEFD8A5B33CB5CAE46CE1
44846E0E401A112580E5DCF778CFF49E6A866FB8C86638E4EBD3F757C202000E
6918E4EA1B62E99EAA8AE7A68BBA124C17BAF1ADB2E156BFC0F0394F9E3B5442
B6DEA6E47EFC5005F3EB0F3500D992DA501F6EBB587CA4283A2E7C4EE876B4CB
299ACDA8CC37249A8848773D723E16B39C92989CFBCDAA5B2DA5644D27B248D9
226D224EF27347ACDC525C3A7AE6C87C5500ADECCB8A1417FFB8DB48C0822C5D
FA5B16F234FC4E903FC910C2636476C295329A93DAAC470AFBCDF2F3B094B18D
B963734E801EB3A7BC287980CB515706E7460C28E761B35671FE871BE3E1CE9D
52BB03E797B55EEC3C8C37A9EA2632C2BD10F5288B70BDB99521B26471B945BC
E9007A34F28B69898A3564484E8F43791B0B6A3D3352B73A16159E65E50C31BE
0DA9421898C1EF490E8DF18A4054925CB477D5F732744BFA8452BCF9F166DF95
FF6EADAA986AC4195AFBB1587DF1A400030C971D3952648BE3AC189170C0FB05
01C817274AD8DC0C54B872D544097251D6F9AAC8E7983CBCA412A49248817A62
A44869EA56F750CB7DA7B2B69E8CFA1CA6E118CCB6B99FDD4963C0C11FDCDB56
2FF851DC50D38C4CDC5F8FDD2711A4D5181B417D68F9936B69B2BD0F65C2C1D9
8719786E672D4A1609B2C9048F1BD59589AF1D28070D4AD1A1577B499593A1D3
9363878160693B4B48CC63EA4CF1F136C8C443D93CCE58CB919FDE61D01593D6
5CBAF1CAAE9D593669FABCC792B9C96BC539862B67E6503CA79920A53285AE9D
689D022E2820F8B542BB54EC244EB130702D353463D23ED7ED7A3439094F4CBC
951125E0A5BAE638626C4F91B8CB6EADA44C2E095A7E926B35989AC3CE05C336
B48402C0007B8F5C3E17167D2C291F6FB792A1029EF8CCB43F046DE1320BF216
4EBE7BB900A62CD4C95E51669527D759C5DC112B474D57C0D5844703DF6D504F
7DB8CF137363D6D3D9534ACFACB07EE89E5F124902EBAE22FE9FEEF3FA81453E
EBB108A719B5F9AD272A53CDFEBDF048E9F448A781FA1329890BF0B3CC51AD79
C1295595B12A725B5ADC9FCE2B3ED2436421C635A11D13F67B6B00F56EE09A6A
9023C5A4E125B0079B70C6B45CFD0371616C05D4A6F6A940AAFF15F450C29DB5
8B48808D821519EE36A0BE93CB3706D27EA60D0DEF25486257233F2AC7FC9ADC
F1F02029BA688AFD398B0DF3ED1A9262B55722D704F903D5780192C0DFCC7356
BD6CC789A2629EA262C4BB4FCBDA761984BEDFD23ACEF83EC71709FD957090DC
C90D2F2FD9A1E4B34940F931DF4E75ABA2412A9CF0078C6FAE73949FEEEB84D9
EF916C93479DC7D06625E42A6C65C1DFC731F48EA1E594113634E6D317E14323
EF1377748888907310FBF74BA05954C204B3E26805C50EEFCF516CED9E2A9362
5C595DD6FC8268C86454137C9559E814E1F376502889370C1085B10D2BADCA14
CBCC401078E63D3AC7CA7B631D93348BC13D20AFAE9A1059EDC316F11E171244
AC470FE64B1B5B1C9374BA4E736ABE56E81EAC92B693F93C8130A739751A9ABE
48EF115E2656C05391F551BF443780E94AF13313AADEF28BB6B2FA10394F2F7D
5423F6C3F8936656F0F49F07545721DEBC0B5D6DE28E766A3CDB4C6D16157650
766283944D7293D6FBA58E534BFC0C60D714E7D0BE679062ACE861231B56BDB7
6DEB34629B1BE26F6EE5A7FBA91C06EBE1C205A35344A24900D065C2D7437B2E
8792D921E155DEAC1BDA3F2EB8F99A089A03244DFB55C3EAC6B640CEF2C7701F
171BCF86F101A74D1C53B2EBFD0D9C243FC93FC26487741D2197D3EFF17E852A
B75F3DCBFE78EF2508D269D3176222ADAEA45CB06D93D4A53A95E7680478DD19
FEA2E668B993859E53C4712FB67283A729EA8BAA49D49A2CF9DBF79CDC8B253A
103F044913B98F9E4BD4A70ED43E9219C3D5A9A3A8CBB83500AB984DD7769D7C
A44B1749620E6C5508959A3F5F1C552685EC0F73A5494E4FA29AB216C5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMR7
%!PS-AdobeFont-1.0: CMR7 003.002
%%Title: CMR7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR7 known{/CMR7 findfont dup/UniqueID known{dup
/UniqueID get 5000790 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR7 def
/FontBBox {-27 -250 1122 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR7.) readonly def
/FullName (CMR7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB981ABA2ACC9A23A5
3E152596AF52983541F86D859FC064A0E3D5FC6647C3CAB83AD4F31DDA35019C
CDB9E3DD3FEBD4C2B36BA3CF6E6C7DA85E25D8A31A9BAD39BDF31FD0D1790707
9DE6A078E8A409D8295F642DF492AC4F86AC84383B0F4C6BAA7C22AD5A898A71
D6CB34D2CD12266C486B75E75A69C14819DD9BB8159088E04D4717E576B8482D
BDA52110AC8B8A80E4E9D58F470EEBD3CF44A1E1EE8DA318FFF3611B02534FC9
F4018C7C57E80570D2F634D98BE5D5EC6D95051157F0EA94A3D12BE0B4B79939
F82F8D73136D3337C44E314B0B16CB030D9A12E01FB667105F334C3EE965E5A3
D410D2F1531547A4497C355AEEB295CD3C5334BEE5232992960B757594B89F3E
52095042DBE6B4DA3C3AD50CA95EA9EBADA10630B500CF1FCCA7D60306743681
7E428D33B7F7C40B425CD58E4CD8AB474BCE6A307BC6C6EBC15A8A96E0E2977E
A33389154536F5C5D8CF036D07F24094E779E5ACBE5502C92892F10F4C6DB627
C7EC4C7BF20B39418A8A85D7FD9B0EAAFD871DDD41F93BDE5FE619AFB8711824
DE890E62C1969A6FE28DD3578AF43D58A728FAFF0B9FAA640962C8F35A26F76C
67F3548D6DB54A25CEB368B47F97EA2B0C4D7C0E7894A4F0C823C6C1922CF9DC
10E05600556F1C7C9AFB33A2DB6F8730F70D6BF94B1FB0887451F2FFEEF3584F
DFADCFA9A2D4846B8F0E51620E1327D994CDF973B837D10C90FF76DE22B47CD5
EE3183898D156861AB4DFAD34A1E3FA260B8164E6680BF58413A553E88F6100B
C4F4E8E972C81A5F88A7DBCDC308B4C3581BCDE13877B976B1F84330839FE5CF
C78551620EB803DF94A5C921F8EE24F7EF8FC4C3E1653514212631F54F90E3DC
E9EAF96E998F340C4F729ECF7AB430FDB7C0BE3DF2C0D23015820E28B743CAD7
7F0AE95413C3EEABBC69E852F53EE1DC260D7F1E712BECEF2F18437DB23D8E74
2902AAFBC733AC5BAA452DD6F3671859AD836C8564E99CDC4183D8495AFD99D6
1F0D65B6588CE7546717911E25BDCA6C2649E3A7466A3E2DA7C7994A30AB4449
672EFD00632EFA8629C1AFB7D53D801028F77C864869FE636213A69173003EA6
BE1ABA95EB07B13D1594BEFCC95ECB0A9CFA9892EE0677D6B6C250855762B7A7
8E4E022640F93169DFA0303A0D5E73BF3E0F4D4AAD10FD7E4EB20532BA30371F
E9F480F9513432946F9828AFB5D4AEAFA5829B2CB544E5EB634C4537EF7DF08A
A1CFD94A52DCF0E7CE4C5EFFB01E6D50558B75DB4C8D5512B06080F27BE62E01
2EEA6A0357441401458C842D3DD4C35B8F561D816B336216CE0C14BF77648AF5
E33912CF95872A1E1AB9A18980A0B29A881D13397C15E1CBA5D3E0B27943EBE2
F3003D15EB446BCFC1C231832475D5B7AA19E4CFDE119D6CD62D053C6D29C333
5F729791D17B3F7108074EEF4D1BD101CB33E01004532CB0D716D2E54D169C6E
80163E70C0E9081F31A1ECBAE079D2A518B790B0CB2CD03DFD034A0F4788E800
B0CD2DC1FAFDD487C2F381EBAB2A2F3F3AF82021B211DC9CD2FBA6A1BB3D4AEA
4C7F3D9A5C21DFF284CCB827D205A69638E98D5DD8E36AFC1A4481B5CB2A2E8F
D6C838DA6F81990F5ED928DC7457501B5C979FF4CD20A830896A460C5DB13D56
A3B2B5D9B292374A9BF392894DD99FCD6A1E655AB395E839F074D1596488700C
4E2891C8AEEF66568E82A8B826F9A28FF84D4D9BDA21F638EAF96880B4EBE0D8
081982F34831A03BEE81FC177700C2360D2A48915EC40D5FE85B400E175D5AF1
067FA0097904FB647757BB44B4042D30D1557BD0F7922D731142FD682139CEB7
58CA4C8C240A0B86B1888CACC507E24E04020BF1882BD9B4CAECFA97DB24D7F5
AD64C69454027F198BA35881B94EE9159A2D73E450C3BDAED66B886D6DEBC84B
653E165176228F88993F12A170775A8D7038BDF2FE8DC1F7B98BDC02D1E6686E
9B834F6C0AD90780B17DFE25F0A4E470CBA84E73F2D22BEE09A040F14CFA2C14
0FDA5A5149B5FAFFE49F55EEFC43831BC43A8326FEE9C7F469C0FC3B000884FA
41DA7318EB57262CB96FC4EC7F16CA07FE1C3BE8C2DBC8A8135953D6DDF20BDF
75A2B6D26074FCE752BD32FB9F5CA797775E8DB9BB9786B469A3CD65A0D9DDDA
C2A166E454A94860EEF5B5C12172DDFC576A03F6E6F8A735FF21A3E9CCB4CAA1
3064893487697986A42CB5888B2B0A79FA3C74E8187BDDF7BEAB884B70B8D4AA
AC6615745AEB906E08BF831CFDE222F58D02B428D55E9D5A3CDE74E42D8A2CB7
E1A3A9439B678AD438793ABBEB72B21C58981DAF3EDCE4BB93D95F4A1E943BBC
B3A012DE92FED4F232A3A7D60CE60B605151F9C7C18A5C653E5D6D15E5B49A63
73E7A339504D0ACC74B8B116EA88C3EBA2CC631AAB29F761E5F062966AD2FD28
7FFE52FA8A115DBE23E471094FFB3CBAFBDF11B7E9058313F2D069B2CE98A962
64645738F02A31E2F2AC11628724034ADBCEE012721EBF0A567893411F950410
B20754A7510D041FFA6144AC9CC46D846B82581F20BBD001D34D9764010824BE
61C30D05E5C5D100A24F1917F01799CF5BC4E50FCECFEA732CB50196825F0E08
8A1EC868C6D4357857EE2957E081A0E4372E31A8ABEF23C3F2EA0FEE57DE4D08
61C570175C41AA0C7A3A579ADF593F18B4AE3782D2552E4E0759C32E059EE741
2D8191E381731769F6648B3581CAF11DAE46471896666F18F02918B0860BDA3C
BD5DE777672447C23C62ACFC2611ED5239D6A266FDA6031EBC5A530C1A2FF7A6
B4380B9A4C877267854AD1F1677CB5433F28894ADF93D39EAB94541A8D232E08
22D082D0951A60F62B87DC028714EC74133A4D65F7D0D1296C0E189C4A42AA98
28E8AE7ECBB9FC8DFABCC6EEB1E9FB06227F90808EF31331CCC5D4C9A6182181
047902DC9FD0444FB94B60FC74F3B677758088CE6A159D940C5CF682335E756A
8BACF06AD7225D49B0002392C889B0FE2C71311D2596F4903D12FA20BA2FFE25
A0804B4BC282929BE31E0F46B34532CB5795A65218CFAE21F390792DA67775C7
B91A2BF4C16DE4F6551DAE3A5827F616BE9040EE6B1008DA2F99A01EF66D697A
6CD1A44E0A15D1F39EA8025E886A68A1E9C334327C7703EE721E497CA924AC90
7723106D913C5ED4BA4FC743CEA8D0F5172526107DA65775C0B1B77179D336C2
9B09B608D80B1A1E87CA1A84A833A00D980D919BFF56F6390E9D5B45E9935CF5
E69D003564462F750F7DCE02DC23CC215A0696B74D8BD3156A392A94F557655E
00BFAA035647568ED66157FACC585E411F7F428569C147DC43F6E4FDE693D0F3
9917BEFEDF61FB980B85515FF6424824E2D995B05CA1E5D3E8BD8D3281DB7CE4
E54923E84058FFC0A8A2C491327D0F87CE4C352B724167CEE224DABA3B95757E
4A419594BE4F92E78BA6D35D4C93D31ECC3134B24A45DC32445725BB044F09A3
AA8C31EFC0A2944ACE2F2CE054CF24DB350FB3C71115518C24BDC0F7E54250AF
9D3378D38480E1CB9029F31570C619A28F065CA4FED5665EDB96712ABEB33B9B
4232C00C1B0215F08D53F7E430887035AC25BEAF06942FD1B6C442253C887AB7
D694C1A6115C8990B4CAF1E81DD1FDDD6B03C00055BE956BE7FD8A4E1049AE69
EDA8593CBA8C4A41E046C689FBBF9F1B64E5856A7FB1C61EC815A56DE2A8ED33
41F370B8203D4E5B19C63AE9E6E0D26F4F3814B5AF48AD30EC9B8402C941FDD9
722FCAFC638FBB835F83DC77F93D367266FA7DFFFCB567EF82B1695AB4D94D09
B18AC041811027229DF431F5CB2BBF6ACCE9D500C8F075A74590641C1A607C56
D2B8624797BCD9C91C3177818691FBB4744EDB6056464A0B95B8D63F7C22309B
82D6126E2057BCC9FE5566D96B7A9B201A09B0D3252A5494C8CA2C8BA8A13C29
37EF2A882D61DA708C279F663D88A8E2999A0F3B6F98C49901A7631BF7708B67
54D0B4C52BF4BE0DA0439E6763A7C9D639AD4092E77B13D3510DAE1475C978AC
796F9B2AAD3BFF35C5A3E19B5E2BF704B3BBDF68CE48BA4FA2496D60E58888EA
28AE12D00E9F0816FAC190590A865BB58569A91BF0345D01230ABA361442006D
BA2C90EC2036BBAB79EBAFC3F217DBD5854C519235F9627A1C3C71D21ED38AEF
0BB40F3B86BB9F09A3F309473D8757AB7E638DC1C59A7F9BCD49DE4107A2E54F
422767FB94048987847205584309397F554744690ACFFDF5902FE5DB355930B8
71863217830DD7A563B0B3A4025ACE75B0E777B4414B62A13B50C54E0E6D47E9
D43BF769B9411B74E1069BF71BA873B4B8973EC9BA492A5DEA58D267872BB246
10AA67B143D0E2223FFB4991E583E629413CC894C3FA4869B72D19CE1A0CEC8C
0FF5E5A3EC1FCB7D3C4289813F0D249A11B55104BD60B2A89BEF44CC77CCDA9A
065B8B83B4F4253AA1D535290DCFAA4773452D110D2B3370F9E2FE5432B54A9E
644EB3BA9BFF62347F376839024CD5EF3C5DFD30F412DD5474B7933E6A1AB63B
4B12F2417C72D0543C26A263AEA53E5BAEBD67E23553A72E949DEC556BEB5D09
C4D7A89B14FE4EC68D0E3E9D65A64B285E53590F418EDA8175113CA375A29930
DDCF4C71ABB26CEB800C2C2B253AC1F53651C88A56ABE5A74F3B54CB4FFDDB92
60AD7272BA25EC2F6FB759AA6E1E7964FB55AD09F4EB25DE45FD01833947BD05
6266AA8ABB7DD792941C7A070FCF3A4636FBF8921C70298D42FE92F079DBA2AD
6149D9CF9EF7264DE6DFCD4429949B15EA90B596340713BD61926DDB2BB23BE8
F9DE38A31620A817420A245946E551463960A8C5C7295E3B3D6A59BCDF5E472A
40B7A2CDDAA43CD8AAFC411D037142579D11054A903E102DF0D0C7B5BB854DBA
F3F086AF991F7F5D5C730F8F9AF213F25786F3EC0E54530FF912F4876FDE16B6
A07D0DC4FC46EC6363BCB68B83ACC448B801EC43FDD2F8BE0E93D809FF81E38E
176AE17C67C85FEA58EC95435434C49A950AA955D8B20989C550AB1F1C31B7FF
99422E1F48FB7D6F327C6DBC4695A03903DB275B94CB39386E46579271870A25
21823E75C377E9D5B46655E8CD8F986372CF8BA846423E26582315A9D19E0BF5
305C32B2A0EAC3ECB275B1D8BE11A37ADF524944219D94EA2C5DBDA768828B6D
775DA8CDB09E0570E4ADDF462EFD8D3FA3F86B1DEECDFFB699AF6507257C1879
16FC615868C2D51F03CD57BA38D42995D9164B257441210084DC409B6EE4C119
0B2E17B0A8D5326DD0010E4A325D5F77BF935693BC90A00A28C7B5F74817DA39
F47A41E32F4F92AA04D30D810F7B1484EB53AD8CFC8CE8928B570314E0F713F8
AF127227190F9C16BB73D2A217FF801C391A29095DA5E4974D137A0CAA7DE702
E20DD4755B1D78739756A5E7EC3542B96AD6844199FFA2F5F2E9C64E2DA4FB2A
ED79869F745C59D235438251BC2E6D26112AAED20E06021D1AB896EE1F1DD2EB
437FBD4A25E42245C5A647493FCC9922E6DD7AF57D5D482921D1CBD6F0F02949
C27777144751C1E72F4EE2BC343D4AE7A8A8758123B54FB1A026144C643651EF
0907A376945E19A8FC7F98A034832A5820A481B0823F980F59623E0511593FEA
BDE6EFBCC0383242CBD4954027B075B21F10472059A480D6E5ED01C3B07461CE
9810251A5C5643EC7403130C2246E8616CEA25EAC7A0076731FEA8CC43BCE3BE
933FCE61067F5FD402E67E2B9DAD954AA77C5BC86BC5E4BCE2ED676D8D8EC7D0
ABC5C86D82180B9D5D7451C71B5149B6B67883578DE9909317928C0A92E3205E
F23015400A1763A6FBF67FDE3318AD2696685A1832FC31CF38589EBC7CA1C818
60D2B2211E04EFCCEA88D9A9082E82951EEB123924A267CB03C48889032F2892
4227E217FA28F87E01CBF27BF1EA60641A4238258CB7AA355908FE36D90F5CAD
FE992D03A33E47CA9AEBEFDA57793F39DC6A9E85D5B289F6B862B35DBCF82E43
5CD6A862F6FFAC36478C384C3BDB0148CB1FEDF55969C776E77917635B5A65EB
F2AD351D21CD3822D43289FE8EB0FED58182997097C7E9F4373553AE1CA92083
EDE3BBE6C3BC7009D15AB5FEC6A59E9FD1BCC7B2099CA15FEF083B9CBF7B890E
CDDDE6BA0AFF306C76500C945DC91BD533FF9A585CEEDEF79238C54E6168001E
26FEB29E523EE501BFA4F60B782B1499B07084C35A2434B4D29D3D8E2C8F945F
A9922443B68D07DF7EAA1F4CDEFFC438B597D8943E231B5216808A85F30EDC81
9DF5DD22F54A45335B4C2203887475F39D247F0E7347BACFEAF220ED82F9263A
6488E73C1910023E505FDEB143006C1A351D441AC57F9D52D2C6D63D78C75605
999885676BBBAD56074298E0BFDACBA1830BA58E87F436CC670EE8EB1870154D
72DDBBF3794F8CAAA3F1E11DE29752DD99EAC695838A19BB67A1FA3829B6E0BC
5301610A0351AAA749F456AE31ADD87D6ABADCDD1FB3CE81C3713F48780DF407
530CB284B2AC709F52EE7AD647DEF9FA4D2A867CCEF728F3D40CF34C28D21527
10160B3DAFB5FE16AFC9D36C6EC4021FC189005862082BEA60AC72B63AD27D72
FAF3C2D89DA2648FC4C65104A069212D87144E8533CD86A6D73DC7CD9DBA25CE
7DA53B000266F3871B24663C77723703315C5E4A89DFCDBAB384AE7EB2F455AE
AB191FED406F7F6EC9E5B8276EF5C4CBA041AC7E8BCEC7CAE840154BDCA3232F
15711ABD1E867A434E9787CA0A6D1F197597DA27ED2402CB2D84ED082E8D3A39
81E6EB270DCA4E7A90E2BEBD3CBB3A2BE3CAB926192D7292CC16845B6399A543
BCFD224BB52F21352732DB5154FA3442733066CDC3E186D8AA97CD801DFBE43A
116C86889BE198DA88CA978B8C40ACB67E8F7BA499DE68A6FF0DC72C3D00BA1A
B378B39610F15CA026F95ED8155CE3FFFFA2E2FEB352DBE14CEE1669F2387B70
55B91185FBBED764266215D518716EDA3DFC9E5DB6B148A553E75AE5E38E1CFC
6EF47B314D54CF24BC13856F4F7C976BB91D143DE32FF49BFFC87E17885A1893
BA1B8E441B08EFC04F7D103C1FFBB665194B3D0920473740C55FB1C50EBCF717
A2359B687FCEAD65616EE89A68F8D91AFACAA0B238EE4AF0279AF5BE5294C3DE
A7E1F5E6248C0210E7D40683F04B12A933C746ECB517CF94BBCC6E4CF49AC715
D8005AFECBDFB7A6B417DB8A28F8E9EAF39CEC1CA64DF37A5E66A76C26F721F8
A63B003A040A62F87DCF61B298F960D510BEFA453F118E59E7DE8CA3DD002EF0
127EAF733D5C61B5132348D280F84D159809CC71A3C6F7373BBFD8D6EF715D34
0016DEFF14AA5F960BF1BB9AC304A1823722843547BB4CA5EA4C41C6C2701C8F
7BDC810443F9DF34BA469A3260009B799871BAF8523C8763544DCD0B382D44C5
F75046AFF85F0B5A3188C2EE786CEEE5496A5AF4BCB0B429CAFC403FB983EFE3
61FD9F52ADFC38E07A0FD7BACBA530D2E4DAB2592AA9564843E7E2305047F060
C5FE4243FA8FDF1B5D4F61ACA7850A604FBC6D6970959752695C90F78961B4E2
C8CFA41082B1A37405AABCEE5BA3DC2B9EA76F486117B84728EC6D8AE6379CCB
402C2AA89078EC992C00D53151E9D82C65643F549A572A20F05107A41BE5AC57
8EDE92AE20B05E2D0C98151CC92D5389A675DFE39DF546A33A84A4C534337ADE
B17C34E09145B37CE1EB1D10D42CC8D6E6B127A3809F7202381FDB88D42084CD
0AEAEB8A8288CB56870EA2BE9D0B9DC8291021CA561E2BA388DA3494E433E0EE
5E69DA51D0AC505C9F71562D3E9750F23CF14D2C8ECF0692FBBCB4A92B48B4B0
AA2163A7E36B833D1AD45BDFECA66E5573877FA45E206F5075D9565C2970DE92
E3B0AFD624E645623364A01628270D6EF68D8AF7559DA18F8BB6445A99DE978B
0D3531E555BA20D6BE46D1108321D81305BB0F2EE77D82D65EBEB0A8A40738BA
045685A3E3E038F5356E49BE6F71D64F94A3EC9B0CF12C1432C59FE15A9431B7
AA65F2DB4CF6B4751FBE36B7F48373E5CA4AD9EC52D2FA1B11DFB9296ACF762F
934AC3FA817DD7D785EDCAFE3EF4797D1185C4DF0E7726477DEA149A5F788214
50E85053A42AAE00CB793241192FD9C14C3ECCCBBB6E0860C6D2D8515ECFE7BD
B02A0B978A38266F256AB89F0000513CC72CD15778445624BEA6B66222ECE227
9EA6F9EC50856EB80AA999BB77DA9375AB63A30FEBCDC361E23E2391F33D0867
19F4B7219AF812D46D7975C089E07505EC40109C4473970143F4593BBFDECBE3
3FA05A7777A6C10BDAA470879ED53A8E9038CCCDC8A774582257EBCDEC11E21E
A0EC3379835FA3591052855F13361B3E4587014DC6009BFD8675426946BEA1F2
277A90E5791BC12E1B2F4CF326A1D2EB03E89B3A0350A8CA251DB73376579BED
F2DBDEF494CAF1D19A43733BE27132304E9D8E9E19CFC045DFD0936ABF643227
0ED86D5A51DC625E43D8E6F9EC78ADB5EBF206304394C8B9D1BD4E37C7BD018A
ACE0E43461FC854398FF03EAF32ED129C4EEC4A7D55FCC13A912E5C332906374
1888EF7E30BFBDA5E7E19AA0587DD19AA2283107CAF1EABC2558849F2E7874C1
A1AF149CDD66C8CE3E6CDA94224DBB6FA809D17858ADFEC26D8B8CFD8390259B
5613CCC11F095F33D0370C2786A791BD3B0EB8B0CD579961DB190A9FD351DD7B
8B951C555D8A0354B1CA7E1EA7AE58ACDDF8C8871E83A2E32EF529FF9A23BC4A
F3AD15B07AB402443A0AFA84EC0A122328F28D60649B935EF513F1729EFBD8DE
C0A093576476D8AB905055CE020BCFE7398CC6DD8251971A24CB7851CC00E364
7027BD4C16B166A241211E54879B9D5E909C5BCCED074DF509345B9D60C9EB44
98C1F65161107E11E3DB7792EDAE6EF6930973FBAE2712FC911F6F43DCCC9C49
0404C6391811E7E1D3D417372E72DFC4CC735162B4FFE081A5D571FA26BE1555
F3EB269446AEFE4F7203DF04A073A2E0DCAC13B99231DD25F8A2FF91AEC1E964
3545D179188092F6312DD9D7D39D66F20AA4283B5EBBBE5F77949F1A4DB79B65
61EEAAA26E7B341E200B521D047E9344E6CD92CAAEAD10C4242AA9599A92AE60
8E036743337CBCC7C8B795CEC9317B702644480AF0E59BDD89CC2B2FD288351B
E82788D597FADFF5B8976839D2CDFE8DBC4DE26C7778B5BB6E841885EF4112EF
0D327C2DF843973767F13030D902D729A39C17F5517A211056C2CB3F0F2D2295
E9D252BF47179D259766489F100BEDED28B4DA1C29E43D82FA7908845132EB41
B392F87C354194C48849CC56ED7830BC4BC62BFD6E480460CD71B483C01DFB3C
F929BA1C43B4237D97577291F35C92718D9ACD922057500DE76D8991B0557352
2EE2A71888B31FA26358669716AE50896BB4ADD7F28900B9B522BBC0D6AE75BC
E9C9A224D04D20B1A4C2962A9480452387A280B09F3DB4231A2380285CFB0D72
6A3FF11383BDFA54BCDAA62C48FB98375A0A43E0E10210093352C05E92829618
E1E540AC5E5760907152EA5A9D998BC9215E4F125622B851374C6187781FAD69
1FAAFA4443C38207AF9F7F3A4741B4714D66E18F2AD2C02D688DFE1E23C7F76E
52AB2771BF2E2B573D0DD39932CB64E7FDFC9643691AAFDF053EF1B028825C55
764E9B2AD46A7232510D3B8E47E192B5D91428038626674341B967D7A4110B1A
A78B1F4B4250ED7510001A5279059EFE70FA8C7FBD81D51708DB2124E48458DF
63F28A59122B575D2649003BD828F6ADEAD242EA7CA343906B69B2460536E107
C767406824FD65394E393880E79DF3D8A15C4B4E64056E696619662B539AA82C
DC87C0CF809EDB876F4B2FEE41D70ABC0DA22C4947F9290A8EAD6ACDEDDB4549
4470638F8E24C83A21652048913B8213DFF310E676581568CE8637A306193D9D
C2EA5935656FE6BFF61ABE5462C7328C5AA7C13C12CEF9140BDCDF4A92CE8B57
622812039DA2FF8A307F3630CBBB6B4B32EAAC7BCA5763FDCAC8FC92D92FED3F
9D6F40978896B83DC355FF9D7B8A36A68E323B55CE5C4C6A5EEE1C742D674DA9
039014CCFD2A760F58769381C012F1F4E02D302E97C46C08EEF600D95028D6A1
4571A52B04ADC032BE88AE3781F1124B54EBABAA88371AE61D03CB48285C74FB
942A8DA1DB8E9BB6FBE6D6547AD1EB5E0CB1D4AE934556EA12312CF7A3D585EA
D718F58BF7718EDC6528D983FA26C47F8AF37656A0A19E01DEA27EE2548956D9
0C443418440BF67456463026AC91215DC3618332C45039591329B7751100AE56
EF14E119CDD8A3CFF9C78AFD366DE8269B6AA751689B24AC6DB93BDD2F672F34
E302D4789B3A3340BFACEB034C8E4BE29FB13651C11678B675F95B64F97063CA
CE2EDD9E311DCC4F4E83
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMMI10
%!PS-AdobeFont-1.0: CMMI10 003.002
%%Title: CMMI10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMMI10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMMI10 known{/CMMI10 findfont dup/UniqueID known{dup
/UniqueID get 5087385 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMMI10 def
/FontBBox {-32 -250 1048 750 }readonly def
/PaintType 0 def
/FontInfo 10 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMMI10.) readonly def
/FullName (CMMI10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/ascent 750 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 115 /s put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3C05EF98F858322DCEA45E0874C5
45D25FE192539D9CDA4BAA46D9C431465E6ABF4E4271F89EDED7F37BE4B31FB4
7934F62D1F46E8671F6290D6FFF601D4937BF71C22D60FB800A15796421E3AA7
72C500501D8B10C0093F6467C553250F7C27B2C3D893772614A846374A85BC4E
BEC0B0A89C4C161C3956ECE25274B962C854E535F418279FE26D8F83E38C5C89
974E9A224B3CBEF90A9277AF10E0C7CAC8DC11C41DC18B814A7682E5F0248674
11453BC81C443407AF41AF8A831A85A700CFC65E2181BCBFBC7878DFBD546AC2
1EF6CC527FEEA044B7C8E686367E920F575AD585387358FFF41BCB212922791C
7B0BD3BED7C6D8F3D9D52D0F181CD4D164E75851D04F64309D810A0DEA1E257B
0D7633CEFE93FEF9D2FB7901453A46F8ACA007358D904E0189AE7B7221545085
EDD3D5A3CEACD6023861F13C8A345A68115425E94B8FDCCEC1255454EC3E7A37
404F6C00A3BCCF851B929D4FE66B6D8FD1C0C80130541609759F18EF07BCD133
78CBC4A0D8A796A2574260C6A952CA73D9EB5C28356F5C90D1A59DC788762BFF
A1B6F0614958D09751C0DB2309406F6B4489125B31C5DD365B2F140CB5E42CEE
88BE11C7176E6BBC90D24E40956279FBDC9D89A6C4A1F4D27EC57F496602FBC4
C854143903A53EF1188D117C49F8B6F2498B4698C25F2C5E8D8BD833206F88FC
BD5B495EB993A26B6055BD0BBA2B3DDFD462C39E022D4A1760C845EA448DED88
98C44BAAB85CD0423E00154C4741240EB3A2290B67144A4C80C88BE3D59AD760
E553DAC4E8BA00B06398B1D0DFE96FB89449D4AE18CE8B27AFE75D2B84EFDB44
143FD887F8FB364D000651912E40B0BAEDDA5AD57A3BC0E411E1AD908C77DCE3
981985F98E258A9BB3A1B845FC4A21BCC54559E51BC0E6C22F0C38540F8C9490
88A0E23EA504FA79F8960CC9D58611C519D3ACDC63FB2FBCAE6674357D7F2285
4BCC9F54D3DA421D744D3A341DA3B494BB526C0734E1A8FC71501745399F7683
FD17EC3044419A88C3979FD2ABA5B0130907B145A8462AAF0A9B511D2C8A7C7F
347FF6AC057E6512902BFD2918E2CD31DE615F5D643764E900B60287670AE18F
FDE15545D8BC69591A8CBBB275AFFC9B14BD68DF0AAB32268FB84844D4DBC7BB
C591C1AC5102C50A9C7BAAA848DA88B0519F0F5F0813BF055CF0E3C86F633A04
B779D2E8E656DB1E09A66A85FE21CA8BA5523F472A229E83F2C4E91ABA46C733
F3C7B5775B06C97782BC225C46385BEBDC61572458EFC5CF4190AB7A9C1C92DA
29F84BAACF552089195966E3AD9E57CC914D20B6962BE80429A16D4DF1ECAA66
36C4343FADF0B2B48F12E2EB8443C4AA29D00949255F3968617F98B8ABD4CC12
048B838EE243A21AC808BD295195E4AE9027005F52258BFCA915C8D9AED9A2C0
80814F79CF943FBE3594C530A22A92E11BE80FCEC1684C4F56712D5846B0749C
9B54A979B315222F209DEE72583B03093EC38F7C5B9F9BCB21DBE8EDDAE9BE8B
75ACE6B12A31083AC8348EC84D1D29D2297A266284B7E9734E207DAF59A25F4E
4AA38509E993C5394FED76E6A2F25462685C4C86C6E8CFC9863338EC1428BDFC
74616BB1BC8948B0ED4C87C15B4405F3A7796F9DB3798FFFE8BD0A94E834817B
D5E9812E308D0CC920470A6F2CD088FCB80462BF7CB3F039A7DF3DAF5B2B5355
E083A385CD2EAF0FC181E40E96DD7E9AB9EF5C7E6866A13B8A54718E950FE097
EF0951A357114F18CE9933D28B3A77AA71E3CE884661F13284BCED5D5FD1A86D
543E588FF473DC2CF9A4DC312500135F29C2D0174B32018C8DBD40EF9A232883
710A1F2AB2CD11312300ACDF789A9B7B93D2035D81D1C84984D92D78A53A00C6
EDA94B24BBAC1AD17774A4E07E6F74ABD90415965616AD540C8ECD8C3A44EE4F
7F4F6BB6238C5062D63FA59B7BF08BE93FAEA70A2AB08FBEAAF7DBF56B95FD93
03CA406543BA6C9527D0DF01F5108D31A51778A5EB1C93F27B72B46146A353A2
01CACBC829603B9989A87CF64528682CCBA0562A8165B185C58A5C6BB72F5E89
500ACCAAB8ECEFBB2640E99EAEEC4EA979AA793D013D61D8ACF8784FF8D9398F
F6A252A709324FB39509F0B3A4E725E82F53543383C6765BE556CC897C758208
AA3AD37B0406E4A79F8F0A6C1983FC73E71CD858C0DB66ED66D5D992978614EE
1EA91EBE191E082EBA1FC040AF19A2202575C2EBEB8058833E3520FA03D2F915
85C1ED337E457B9FEEB0C6EF2735EFDA6E0D05FA641BCF698AC6B97751E8306C
4DF00A39B8581FF53DB8F8525FDB196D85950906CCB59B8EF171349AA3B567B1
6A00819947A995FB383C3C1709C9A2C113B2E40BB832B7D4A0FBA0B16A2C455F
55809CC425C403E9668DC66BE45B71A81C332FD4DB279D22A2959962304A8F18
085893DAC61317D24A8F198FDAB95F3B86F0AFD35047B868A9A17037A2829A02
BAB042F75F349E197A7EED41984C2859754CAFD0251439921C248B463B516951
2E1322C80D73F9CBCAA63A585450275AC2492E4D3FB78E800F788254DB5E610D
CF788DF5C70FF99892BCDF16133E34B24B77C8F097F546B87C603DDB8998B66E
BACB68BA27462AF54AA405682EC96D701F0D474DECD5F95CA2102DF639EB169E
D518162C2BAE45FF698B6DE15FC6E7DE48C336C40A670FD26952A6BAB09115E1
991F0073419F2CC2A1C08BE91096936AA0C37E4ED3CCCEE235476074B8FF1125
6BDE3701F85532D8BB64CCC927CC335281C95EA689706F0AC717DC2CF680C754
E5EFD7FA4BB8880B2B727A964C876D4A223069D4E6001771F0E23EAD2A4BBC80
E76675297B2EF05F52BF4E71B3EE2BE3048CF088C79540113C66AE98B2FD3CB1
B0741A215FD070882C52765009D7D711DAA2508F19AE7DDA15229A856AC49BC3
4DDF40814FF96500E4B9B02D412E94623C5FDCC76C0FB8E42DF56A904FE49D65
1DA7C53901B2EA71AB658A464D3ABDE27D9DB8D9E0B48F64E61A2495AD5D8DAB
B5E72424AD017DF37964AF911BD7FA21A5EB4775DC8E95EF0C0EB856B00D89D7
8172A1DE8530767D317B8256103E53CFB877E10686A04F5A08F8DC58D843DEBA
FD5F40597588663D103689F6EB3EB14D06E18C8078F2538B43E712DF491FC5C6
AF639256C8C6134B64D560D8476DEA6329D995E46CC4BC78841C59E73648B47E
BFA7DE0846422F738454AE77E822A083405289247BD7C478BE4974F742CD6051
E99FBB1D1B3FBABFEE855174734EE45E87D0AADF32B1283B911162A9955847FD
38944D70584FAA6B1A7191C5C134B73F98EB632B69E2F0C0F94156787C34C8A3
7622A029D58F9626B74F8A8A1F3803E0BC20E0EADEB1E99B70F1BD9F980FB751
2A842843DE42EB142A84D5D3138629AE9EAF6F3479C423E8829C8816FA6EFA27
DCE5580E65AA9854B1C64163DC318420CD993C15BFD76A8BA1182860A6B03D6D
22B8CF43CFE6C8AB27C64842E239CAE707D3086BADDE1D7C94E3BC96319470D6
8D26915C575CFDD03271D6BB9DE86A0EB6EEA6E768B224A626C62A9AB48A6EDB
44F70BB5AF991CDF9736D65933E81CC57A78F623F33EC9AF535F2F25FA4EEC90
D50DB7E87F31E971A75A33A301CA6013EEC5A4E179D695B33DADF2C98364434A
42926776000B610E17524162253F6FA638D6581C18F99EA0BD1D2E24D2424ADF
C05010D08192485153DD03930C7BF45237593E484F9851E6D464FA10FECA5D9E
0C8CCC97DE029030900CDBB491C5CF226DBF903CFE7735D939C3FDF3A20B70CE
66579B28B99313FEE914E295388C7BC8E055A2E54EA3A8206D3C8F4F7C0BA5E6
E519419FD8CE215F7B8E9BEC604A9E3FE272A0328A24E31997C8A91E0946BCF1
6943A97CBED2AB9FC636B49828BBB8B89E0BBC2653796431224895ABA5DAC41E
1854BD9764E86147FD7624F736F40DE3B7582EDDFD15C2BDE3F22B5A54D7DF10
B87A1301CE85CFC061689A890A321412A13314AE96DCD3EDA75035FDD8F4AB9B
897A2C68263A68457032C469987970648BA2D88B1C5375DFEAA35A917B8A952E
EE670427942AEDB3CB599C5746180E392837D371E15D860620ABDB6AA7772C40
A5E346661673ACA530BE3D8E3FFB895E5DA3DC23B1B43C080C77F7E47847F0F3
F3AA5CA9E4BF75FC5EBD18D19F21A7DAA3B11CABC6E4070A15F7DBC8B05EB6AA
A02EF1B078EB66D61D6AFE41DA9B36FE7EC9EF94D1EA26282A9871E2CACB3126
2AD49C2D9B50A6E47D8F2CCAD50992D1B430979A45FD9E76182A19964BB2A1F6
51779A2B258DC1DF4C2F3074621286831F3848AC152DDD2BA561E6586ADA88D3
598A2CE2CD048F027CE0008B828BD915887D7785341E8305DF2346ADB76BE99F
87B02173BDC334E9221C8DF54114A6B24C1C5340299512FA6C8C51AB4C8778CE
178CEF531C6D1B5FF0A1BE8EFF767F959BD4C345C52699A29A17B2A230842BF6
4B011217D6D24EDAC3F6D53482786F1CA33169B90ECD499407D37CE9B70DDF78
7B7547B32952535BA9ACD1E244447AE3FCED3AF28717083CF9590A09780984D6
AF0743C82AE4FB3E2BB2856A4153A3967A023FFC35382D6C22D84A924900B6A6
3DDD400E6D2418DA6C27F2FA34C075C902B89EBAE658B3C9A18EEE449DA5A379
337DE95CB7AB3F0970CF1A5D8FAD8090E495570FDFB2FBBA79244780D8035547
C5A55BB21A2270F724BF5D442CDC5BB9F09BE0CAE59B1C2270F0BDACE698F2C5
DE8F66BFB9634904B161F5BA2B1950048300D69BABD312D58D89C4ED527AF7BA
7DA2478EDC2CDEE3473DD8A8ED9D891CD1FC21F23013228BB3281B71FCE959BD
6F8E9059D682A7FCC5265A0620992D4FA8D78377EB34CE3ECA070EE3707239BC
98907DB0120CE42ABA32CF97127E28382BDDFD685674279F588D4F951216C355
821361790F64C2CC720DE97E8ECB57326C43EE47367628E05769E106868B54F4
C33C9951908DF6FC4F5ED2C7787BD8FA591BBB3E9C6C1DA94CC5E38D9B20C886
7D237572FF46DD896A4D6163408EA6CEFAC398EE041EAE29D577E75326CA17A6
B072D47A7B13EC441CE6DAA042ECD02134CBFA6809A435050413817193DAEB16
A5882C8AEA44BCF36E74E9ECCDFE7E19FF5A5DD7A94E5AB4F8702C3DA7F42325
23C808670A0490F5B373DADE40814FF9650241D3D69C91FBC5ECE728F827D9BF
C928602E05477903449E079164CA39859C4BCA60C579F490AA455F82B5050BB3
969AFB478E0D4A257B3356EA3CD62051FCE6C6B1929CFF85BFDF166BEF658E10
3A55E007F38EBBB248B3F0B8ED1925106B499B762E45113AE1AC9DE09644C84B
9C08034B297314EE69BC32DB6E7D7FB9913CE5AC17E7335979E9DCCE2BAB3725
1976155551F9706A576FE0E3ADCCF72C87683291528ECB749CB0ED291966E239
B5E3630676BD409E08F85BC1AEC9A2D4135376284A96EA24431243BD6FE8B966
95F11A4BB53F392E0AEFEA623064FF8A7002367B0A515635CB2D2DDFB9B4A8D7
FE721754E81BBA548848A235B91AD4E4F7DB19CCE2F61D277FC00AB956EB93BE
44AB4970CA56BF59506C94ED160FB1E25D3DF2988A532BDB787BFB8539D22986
FDC378AC31444E63C4727FEE121A43751043849E6DCAC5B59D0FC703AAFBBFD4
E8B7C268F21615AD02CE9DABEFA27B5FE6A6441B619539CAB1F810F1263447AA
633F5DAF483752EF1A0421740E3A811D2D2898CBF53E7F686C9223FD7235F02D
6F90D2D48CC20AB87778DE3C6FB335E0F0EC20B5DC5B65223FE117526DE2C72F
FE839DF93CB2A7D66CD900CB325F891E311BEC932F703FB4FEFA29DB8B9C88DD
375EC71B3D58C7BC59ADA91971A3BDA1ADEA629CE6CC92BD542CDDFAA7706FB2
6CDDE2DF07E56D6741916AE8E8744339816F3E6C38062747AA9FDA2A2678A6B7
EFEA870AA3A4D71B25EE3013EAB1DBA34401B867C7A41AE51E0421D41D3BB83C
E120C8FEABA6E5DEC53A689C21426D4BBCB68CB37568761C360E6D4E3596FB7D
F4DEC7918E58C0293D12D6DDA7E9DCDAAD7C939F55CD1BC4A228B31E9A904156
DA6B40B08E6ACE674618B768DD681C772A3E55FE096CF949CF3B0460ABDCD891
D17B37B355B29AB5137899C036F31DA026244FA25FB798FBE5105BDA29F46538
D3D3AC1001A7BCECE64DE94FFE6C354166A0F97256137BDFA07F6E22A3D1D2F4
9588DBAE95E895BC5E64DDCBBAA8D0A22C229B42CB717FC711E7E9DF793DF80B
9F14754585A3C7E17F37B32924B9F9870DA8635E3E18BD1DCD81EDF01834D9C6
B33F23C956C2FCBFA47D84422F583459D827D1E120B97694D12F1F54D02379C0
D288F7104F3FFCF4F76E3494F4ACBD1BE3A15543CC680924C78A473F8E311ADF
8FE00A04C6C393DE61AD3EDA5BC031E2353076A2489391B52632387CA28A7B93
FBB065A6EF3658AE80B1ADA47E9B2539E73A71FA75645F85ED8ECC257FB4CF26
B6C912DE9D0F9899E70BECCB934AD32CF49A093371A9F73DE6255EBC39DE1E7F
00D0CBDABD4D0383977E694890E71FBE5C376BE5F3A80C28987417504F515C50
909F3D31178BB9B1D085BE514F71B910A9085BD6122DDC72A150BFE266920E49
5661BCB4BAB51D6DEFE32B616963DBD989FCDD1637B294CE4E288655FBEFA1BF
7F25BBF8CF17C2D5FD161A7C2CC9CC7490D9BF15A1D35B3BFA43ADE256E88BDA
BD490D92907C57BAC408A575EC84D6AEE070148C7C9A91C03B09FDBD792E8FF0
C0B886AAD2EDD86541E5E579359D40E3AC312ACD3D8FD49F71BD533DDF8859B1
BAF17F1884E331DD07CEEF93B71D492AEBAADF7A263450A7A72210CE630A0D37
BF024BDC09ACC882816B8C22C62AE38A3A8D0F6EBC2B1B2C0B8161A8B076DD5D
4B779C0788546BB4CF57332230D237856B00D79C28A7C01D11F44B7304F69075
94B97A745DA43D1BE561372CE611C345A843834E46AD9DDB16CABCD3FA33D6F1
F6B5C0497F5EE5400B305CDC16A7EC286AA4D45D0EEBB9DA06AC9C5294D68EC9
E4DC3CA2B92CE8FC0526184A86EDC7AB34D67E60AC12D9CA8FD300235EC968BA
92C6FBDA47572BC5600F25249F60AD287CBDAE980E747FCBE7EE5CD323E733F0
63553B494D3DDEB9CC1480B5C3BB79A28E419AA65B18CB297AB383419E890E2A
CE6F98C9900CCB4675280A10CF060B8D220DDA1BE55DFA65715EABCC1AFAA271
B1F8732341613E17B231231A0D24D4D7FC198AE04D89A99C4536217769C6FBD9
5EE24A6302F97438F7C0E311C878F674B4477A5ADA3952CDE4055AC408B8174E
86F8FB797646DFFFE0ECA25D1BAB9A9F71F3926D3D85AA63E7A8C931D71E79E0
AF1EAC26FADE468F4FF7F3861D14C10E3BE1F9EAFD6D3A544E8108D5DAB5B180
3950C74818BC8AF4758A108F462EF1826647A49667F5E482038C54716856D9BC
35F29922846D2148F92F943E951D7438C73D6A60459A8003174036C64E1629CD
155D47FD04B03C023AD67CD5A70C98AB556EEAB8C48169706E5B352F6505D580
AC945171BFE62E81F8F500438AC3B64D857BA5BC54C2C4BBB237F8FA51296255
E66A92A61FE13FDE781D393557EB72CEBAD86511035F775FAC39A0479CCD400F
226709118F887F47CC2ECC8F79816D4A945B2845F50AFD62D8C9A9BBF4739496
9E644BC9F7B04803B7EE75A09EAE94365F6F374B4FCEB0B506C76297564B9B6B
8B812BC3A33929AA94692572B010E6210AEAA312BDFC88BF302244AB9D587A9B
919823FD01DE12438D960944D1977800FEB49E638C32E5B188B1CA033E0C37EE
A142F746367888AA119535F0CCAF7EAA461B790EB089D2D6962E28A398439BB7
9C9943654D7A2D765B46BC0DD1F915327F369162E1BA1BA83110B93F442905E0
523BFF5E279508A98568CD5CFD18FABBE9D17265A9081E7BF64155A2CE3C0DF7
88D00671AD65654709589BAD7EA65BBA811387ABA5CA0BC3F66D3D48597A0D1D
2C268375DF47CCF62166262AE4840AB03BF49BE67A05EF66328EC729F03CA5FF
AD3937FC053E223303565DC771ACF32E63DFB96D5030E787961D72D02C195C66
B48E9AF0309DC169CFE8D16E2818DA94693A18F027DEA0D916672480464F7E22
CA6E431FE38D3FC019BDD229E064B72C545C61C6EA55984565CCA88ACB01F744
3B4593CC89472D2E1E16854D497B84048CC321AF32A276665F4A678DD3C6A963
876399F7349184821898EE84FC810D5CA731A787D13553995E18AF07AD8F3A56
7025C444E366102C2160AE9542F409224B8151264426BAEACF88F09DCB5EB4BC
DE131DD65B1F971896EB39B1D1D41668A0F90430C571778EC4C350ADC6E4D4F8
D1CBB4279505BCB1CC931CB3FFBEADD18F54CC09DA91FA5662983B0DA4D137F4
AE579516CBBE50F51D40DDA17F2640F4BD931D1AEB36227E255C7FF7C9122862
77053CF21EC61DDAD82C69B40EC54B42789C015F8BA5CD76B04FF04CA9ED4860
B8CBB4B27F97A2A9F7E81FFA7B919955AD6BBB06DBE620D37446A3C3F4F4C669
8F29FB4E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 8000 8000
(32S2-4,4,4-g5-path70-autopp.dvi)
@start /Fa 198[553 553 553 553 553 553 553 553 553 553
48[{}10 1106.96 /CMR10 rf /Fb 198[441 441 441 441 441
441 441 441 441 441 48[{}10 774.872 /CMR7 rf /Fc 140[519
115[{}1 1106.96 /CMMI10 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop
-39321600 -39321600 39321600 39321600 26105516 0 26105516
 22047 -22047 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.001 SLW 0  setgray   0.0 0.0 2 copy moveto 199.16928 .5 CLW mul
round sub dup 0 rmoveto 0 360 arc closepath  gsave 0.001 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 128.18544 0.0 0.0 0.0   /currentpoint load stopped pop /Lineto /lineto
load def 0  setlinejoin false Line   0.1 SLW 0  setgray  /ArrowA {
/lineto load stopped { moveto } if } def /ArrowB { } def  218.82301
-90.64061 /y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA
135.00000 0.0 c mul 2 div add def /angleB 180.00000 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  [ 0.0 0.0 90.64061 -90.64061
  /currentpoint load stopped pop /Lineto /lineto load def 0  setlinejoin
false Line  closepath gsave 0.1 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 128.18544 0.0 0.0 0.0   /currentpoint load stopped pop /Lineto /lineto
load def 0  setlinejoin false Line   0.1 SLW 0  setgray  /ArrowA {
/lineto load stopped { moveto } if } def /ArrowB { } def  218.82301
90.64061 /y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA
225.00000 0.0 c mul 2 div sub def /angleB 180.00000 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  [ 0.0 0.0 90.64061 90.64061
  /currentpoint load stopped pop /Lineto /lineto load def 0  setlinejoin
false Line  closepath gsave 0.75  setgray  1. .setopacityalpha  fill
 grestore gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 0.0 128.18544 0.0 0.0   /currentpoint load stopped pop /Lineto /lineto
load def 0  setlinejoin false Line   0.1 SLW 0  setgray  /ArrowA {
/lineto load stopped { moveto } if } def /ArrowB { } def  90.64061
218.82301 /y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA
225.00000 0.0 c mul 2 div add def /angleB 270.00000 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  [ 0.0 0.0 90.64061 90.64061
  /currentpoint load stopped pop /Lineto /lineto load def 0  setlinejoin
false Line  closepath gsave 0.1 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 0.0 128.18544 0.0 0.0   /currentpoint load stopped pop /Lineto /lineto
load def 0  setlinejoin false Line   0.1 SLW 0  setgray  /ArrowA {
/lineto load stopped { moveto } if } def /ArrowB { } def  -90.64061
218.82301 /y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA
315.00000 0.0 c mul 2 div sub def /angleB 270.00000 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  [ 0.0 0.0 -90.64061 90.64061
  /currentpoint load stopped pop /Lineto /lineto load def 0  setlinejoin
false Line  closepath gsave 0.75  setgray  1. .setopacityalpha  fill
 grestore gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 218.82301 0.0 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
225.00000 0.0 c mul 2 div sub def /angleB 180.00000 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  218.82301 90.64061 /y
ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 225.00001 0.0
c mul 2 div add def /angleB 250.52878 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  192.27664 -64.09119 /y ED /x ED /r 37.54482
def /c 57.2957 r Div def /angleA 115.52877 0.0 c mul 2 div add def
/angleB 179.99998 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  closepath
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 218.82301 0.0 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
225.00000 0.0 c mul 2 div sub def /angleB 180.00000 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  218.82301 -90.64061 /y
ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 135.00000 0.0
c mul 2 div add def /angleB 180.00000 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  154.73181 -154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 135.00000 0.0 c mul 2 div sub def
/angleB 90.000000 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 0.0 218.82301 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
224.99998 0.0 c mul 2 div sub def /angleB 209.27758 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  -76.31741 184.24738 /y
ED /x ED /r 10.12622 def /c 57.2957 r Div def /angleA 254.27790 0.0
c mul 2 div add def /angleB 330.72251 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  -154.73181 154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 15.722394 0.0 c mul 2 div sub def
/angleB 0 0.0 c mul 2 div add def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arcn  closepath gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 0.0 218.82301 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
225.00001 0.0 c mul 2 div sub def /angleB 209.27762 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  -90.64061 177.7559 /y
ED /x ED /r 12.02869 def /c 57.2957 r Div def /angleA 344.27772 0.0
c mul 2 div sub def /angleB 270.00007 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  -64.09119 192.27664 /y ED /x ED /r 37.54482
def /c 57.2957 r Div def /angleA 224.99998 0.0 c mul 2 div add def
/angleB 269.99998 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 128.18544 -154.73181 /y ED /x ED /r 26.54637 def /c 57.2957 r Div
def /angleA 90.000046 0.0 c mul 2 div sub def /angleB 57.350068 0.0
c mul 2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  143.73642 -137.98952
/y ED /x ED /r 5.74385 def /c 57.2957 r Div def /angleA 102.35056 0.0
c mul 2 div add def /angleB 180.00034 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  [ 128.18544 -128.18544 137.98952 -137.98952
  /currentpoint load stopped pop /Lineto /lineto load def 0  setlinejoin
false Line  closepath gsave 0.1 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 128.18544 -154.73181 /y ED /x ED /r 26.54637 def /c 57.2957 r Div
def /angleA 90.000020 0.0 c mul 2 div sub def /angleB 57.350070 0.0
c mul 2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  150.59259 -130.60759
/y ED /x ED /r 8.27846 def /c 57.2957 r Div def /angleA 192.35001 0.0
c mul 2 div sub def /angleB 119.27756 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  141.4571 -141.4571 /y ED /x ED /r 18.7724 def
/c 57.2957 r Div def /angleA 74.277656 0.0 c mul 2 div add def /angleB
134.99998 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arc  closepath gsave 0.75
 setgray  1. .setopacityalpha  fill  grestore gsave 0.1 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 0.0 -128.18544 0.0 0.0   /currentpoint load stopped pop /Lineto
/lineto load def 0  setlinejoin false Line   0.1 SLW 0  setgray  /ArrowA
{ /lineto load stopped { moveto } if } def /ArrowB { } def  -90.64061
-218.82301 /y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA
45.000002 0.0 c mul 2 div add def /angleB 89.999999 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  [ 0.0 0.0 -90.64061 -90.64061
  /currentpoint load stopped pop /Lineto /lineto load def 0  setlinejoin
false Line  closepath gsave 0.1 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 0.0 -128.18544 0.0 0.0   /currentpoint load stopped pop /Lineto
/lineto load def 0  setlinejoin false Line   0.1 SLW 0  setgray  /ArrowA
{ /lineto load stopped { moveto } if } def /ArrowB { } def  90.64061
-218.82301 /y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA
135.00000 0.0 c mul 2 div sub def /angleB 89.999997 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  [ 0.0 0.0 90.64061 -90.64061
  /currentpoint load stopped pop /Lineto /lineto load def 0  setlinejoin
false Line  closepath gsave 0.75  setgray  1. .setopacityalpha  fill
 grestore gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 218.82301 0.0 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
135.00000 0.0 c mul 2 div add def /angleB 180.00000 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  218.82301 90.64061 /y
ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 225.00000 0.0
c mul 2 div sub def /angleB 180.00000 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  154.73181 154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 225.00000 0.0 c mul 2 div add def
/angleB 270.00000 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  closepath
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 218.82301 0.0 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
135.00000 0.0 c mul 2 div add def /angleB 180.00000 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  218.82301 -90.64061 /y
ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 135.00000 0.0
c mul 2 div sub def /angleB 109.47122 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  192.27664 64.09119 /y ED /x ED /r 37.54482 def
/c 57.2957 r Div def /angleA 244.47122 0.0 c mul 2 div sub def /angleB
180.00000 0.0 c mul 2 div add def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arcn  closepath gsave 0.75
 setgray  1. .setopacityalpha  fill  grestore gsave 0.1 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 181.28123 -90.64061 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 135.00000 0.0 c mul 2 div add def /angleB 199.47122 0.0 c mul
2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  90.64061 -218.82301
/y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 64.471222
0.0 c mul 2 div add def /angleB 89.999999 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  154.73181 -154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 135.00000 0.0 c mul 2 div sub def
/angleB 89.999993 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 181.28123 -90.64061 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 134.99999 0.0 c mul 2 div add def /angleB 199.47121 0.0 c mul
2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  165.72722 -112.63141
/y ED /x ED /r 21.99384 def /c 57.2957 r Div def /angleA 154.47120
0.0 c mul 2 div sub def /angleB 89.999992 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  192.27664 -64.09119 /y ED /x ED /r 37.54482
def /c 57.2957 r Div def /angleA 224.99998 0.0 c mul 2 div sub def
/angleB 179.99999 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ -128.18544 0.0 0.0 0.0   /currentpoint load stopped pop /Lineto
/lineto load def 0  setlinejoin false Line   0.1 SLW 0  setgray  /ArrowA
{ /lineto load stopped { moveto } if } def /ArrowB { } def  -218.82301
90.64061 /y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA
315.00000 0.0 c mul 2 div add def /angleB 0 0.0 c mul 2 div sub def
/angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA
angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto
} if } def /ArrowB { } def  [ 0.0 0.0 -90.64061 90.64061   /currentpoint
load stopped pop /Lineto /lineto load def 0  setlinejoin false Line
 closepath gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ -128.18544 0.0 0.0 0.0   /currentpoint load stopped pop /Lineto
/lineto load def 0  setlinejoin false Line   0.1 SLW 0  setgray  /ArrowA
{ /lineto load stopped { moveto } if } def /ArrowB { } def  -218.82301
-90.64061 /y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA
45.000000 0.0 c mul 2 div sub def /angleB 0 0.0 c mul 2 div add def
/angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA
angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load stopped {
moveto } if } def /ArrowB { } def  [ 0.0 0.0 -90.64061 -90.64061  
/currentpoint load stopped pop /Lineto /lineto load def 0  setlinejoin
false Line  closepath gsave 0.75  setgray  1. .setopacityalpha  fill
 grestore gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 0.0 218.82301 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
315.00000 0.0 c mul 2 div sub def /angleB 270.00000 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  -90.64061 218.82301 /y
ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 315.00001 0.0
c mul 2 div add def /angleB 340.52878 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  64.09119 192.27664 /y ED /x ED /r 37.54482 def
/c 57.2957 r Div def /angleA 205.52877 0.0 c mul 2 div add def /angleB
269.99999 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arc  closepath gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 0.0 218.82301 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
315.00000 0.0 c mul 2 div sub def /angleB 270.00000 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  90.64061 218.82301 /y
ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 225.00000 0.0
c mul 2 div add def /angleB 270.00000 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  154.73181 154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 225.00000 0.0 c mul 2 div sub def
/angleB 180.00000 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 154.73181 -128.18544 /y ED /x ED /r 26.54637 def /c 57.2957 r Div
def /angleA 180.00000 0.0 c mul 2 div sub def /angleB 109.47122 0.0
c mul 2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  165.72722 -112.63141
/y ED /x ED /r 21.99384 def /c 57.2957 r Div def /angleA 154.47123
0.0 c mul 2 div add def /angleB 209.27761 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  141.4571 -141.4571 /y ED /x ED /r 18.7724 def
/c 57.2957 r Div def /angleA 74.277664 0.0 c mul 2 div add def /angleB
135.00000 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arc  closepath gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 154.73181 -128.18544 /y ED /x ED /r 26.54637 def /c 57.2957 r Div
def /angleA 180.00000 0.0 c mul 2 div sub def /angleB 109.47122 0.0
c mul 2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  90.64061 -218.82301
/y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 64.471227
0.0 c mul 2 div add def /angleB 90.000000 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  [ 128.18544 -128.18544 90.64061 -90.64061  
/currentpoint load stopped pop /Lineto /lineto load def 0  setlinejoin
false Line  closepath gsave 0.75  setgray  1. .setopacityalpha  fill
 grestore gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 0.0 218.82301 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
225.00000 0.0 c mul 2 div add def /angleB 270.00000 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  -90.64061 218.82301 /y
ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 315.00000 0.0
c mul 2 div sub def /angleB 270.00000 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  -154.73181 154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 315.00000 0.0 c mul 2 div add def
/angleB 0 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arc  closepath gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 0.0 218.82301 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
225.00000 0.0 c mul 2 div add def /angleB 270.00000 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  90.64061 218.82301 /y
ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 225.00000 0.0
c mul 2 div sub def /angleB 199.47122 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  -64.09119 192.27664 /y ED /x ED /r 37.54482
def /c 57.2957 r Div def /angleA 334.47121 0.0 c mul 2 div sub def
/angleB 269.99998 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 90.64061 181.28123 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 225.00000 0.0 c mul 2 div add def /angleB 289.47122 0.0 c mul
2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  218.82301 90.64061
/y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 154.47122
0.0 c mul 2 div add def /angleB 180.00000 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  154.73181 154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 224.99999 0.0 c mul 2 div sub def
/angleB 180.00000 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 90.64061 181.28123 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 224.99999 0.0 c mul 2 div add def /angleB 289.47120 0.0 c mul
2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  112.63141 165.72722
/y ED /x ED /r 21.99384 def /c 57.2957 r Div def /angleA 244.47124
0.0 c mul 2 div sub def /angleB 180.00002 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  64.09119 192.27664 /y ED /x ED /r 37.54482 def
/c 57.2957 r Div def /angleA 315.00004 0.0 c mul 2 div sub def /angleB
270.00002 0.0 c mul 2 div add def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arcn  closepath gsave 0.75
 setgray  1. .setopacityalpha  fill  grestore gsave 0.1 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 128.18544 0.0 181.28123 0.0   /currentpoint load stopped pop /Lineto
/lineto load def 0  setlinejoin false Line   0.1 SLW 0  setgray  /ArrowA
{ /lineto load stopped { moveto } if } def /ArrowB { } def  218.82301
-90.64061 /y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA
135.00000 0.0 c mul 2 div sub def /angleB 109.47122 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  200.05061 18.7724 /y ED
/x ED /r 26.54637 def /c 57.2957 r Div def /angleA 154.47122 0.0 c
mul 2 div add def /angleB 224.99999 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
 closepath gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 128.18544 0.0 181.28123 0.0   /currentpoint load stopped pop /Lineto
/lineto load def 0  setlinejoin false Line   0.1 SLW 0  setgray  /ArrowA
{ /lineto load stopped { moveto } if } def /ArrowB { } def  218.82301
90.64061 /y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA
225.00000 0.0 c mul 2 div add def /angleB 250.52878 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  200.05061 -18.7724 /y
ED /x ED /r 26.54637 def /c 57.2957 r Div def /angleA 205.52877 0.0
c mul 2 div sub def /angleB 134.99998 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
 closepath gsave 0.75  setgray  1. .setopacityalpha  fill  grestore
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 154.73181 -128.18544 /y ED /x ED /r 26.54941 def /c 57.2957 r Div
def /angleA 70.528917 0.0 c mul 2 div sub def /angleB 60.722774 0.0
c mul 2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  168.18584 -106.69913
/y ED /x ED /r 1.73834 def /c 57.2957 r Div def /angleA 105.72259 0.0
c mul 2 div add def /angleB 185.12834 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  173.50423 -98.41458 /y ED /x ED /r 10.99539
def /c 57.2957 r Div def /angleA 230.13193 0.0 c mul 2 div sub def
/angleB 205.52851 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 154.73181 -128.18239 /y ED /x ED /r 26.54637 def /c 57.2957 r Div
def /angleA 70.527914 0.0 c mul 2 div sub def /angleB 60.721474 0.0
c mul 2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  169.5595 -104.50795
/y ED /x ED /r 1.91461 def /c 57.2957 r Div def /angleA 195.72033 0.0
c mul 2 div sub def /angleB 117.27406 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  166.56905 -109.41302 /y ED /x ED /r 6.93518
def /c 57.2957 r Div def /angleA 72.277063 0.0 c mul 2 div add def
/angleB 115.52796 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 -90.64061 181.28123 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 315.00001 0.0 c mul 2 div sub def /angleB 250.52878 0.0 c mul
2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  -112.63141 165.72722
/y ED /x ED /r 21.99384 def /c 57.2957 r Div def /angleA 295.52876
0.0 c mul 2 div add def /angleB 359.99999 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  -64.09119 192.27664 /y ED /x ED /r 37.54482
def /c 57.2957 r Div def /angleA 225.00001 0.0 c mul 2 div add def
/angleB 270.00003 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  closepath
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 -90.64061 181.28123 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 315.00003 0.0 c mul 2 div sub def /angleB 250.52880 0.0 c mul
2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  -218.82301 90.64061
/y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 25.528784
0.0 c mul 2 div sub def /angleB 0 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  -154.73181 154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 315.00000 0.0 c mul 2 div add def
/angleB 0 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arc  closepath gsave 0.75
 setgray  1. .setopacityalpha  fill  grestore gsave 0.1 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 181.28123 -90.64061 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 134.99998 0.0 c mul 2 div sub def /angleB 89.999998 0.0 c mul
2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  189.78459 -61.60219
/y ED /x ED /r 12.02869 def /c 57.2957 r Div def /angleA 134.99995
0.0 c mul 2 div add def /angleB 209.27746 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  154.73181 -154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 74.277616 0.0 c mul 2 div add def
/angleB 89.999998 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  closepath
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 181.28123 -90.64061 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 134.99996 0.0 c mul 2 div sub def /angleB 89.999998 0.0 c mul
2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  196.83221 -37.54482
/y ED /x ED /r 21.99384 def /c 57.2957 r Div def /angleA 225.00003
0.0 c mul 2 div sub def /angleB 160.52881 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  192.27664 -64.09119 /y ED /x ED /r 37.54482
def /c 57.2957 r Div def /angleA 115.52878 0.0 c mul 2 div add def
/angleB 180.00000 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 200.05061 0.0 /y ED /x ED /r 18.7724 def /c 57.2957 r Div def /angleA
180.00000 0.0 c mul 2 div add def /angleB 240.72240 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  196.83221 -37.54482 /y
ED /x ED /r 21.99384 def /c 57.2957 r Div def /angleA 105.72237 0.0
c mul 2 div add def /angleB 160.52874 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  200.05061 -18.7724 /y ED /x ED /r 26.54637 def
/c 57.2957 r Div def /angleA 205.52878 0.0 c mul 2 div sub def /angleB
134.99999 0.0 c mul 2 div add def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arcn  closepath gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 200.05061 0.0 /y ED /x ED /r 18.7724 def /c 57.2957 r Div def /angleA
180.00000 0.0 c mul 2 div add def /angleB 240.72239 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  198.84105 -14.13173 /y
ED /x ED /r 8.27846 def /c 57.2957 r Div def /angleA 195.72248 0.0
c mul 2 div sub def /angleB 122.64997 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  200.05061 18.7724 /y ED /x ED /r 26.54637 def
/c 57.2957 r Div def /angleA 257.64987 0.0 c mul 2 div sub def /angleB
224.99992 0.0 c mul 2 div add def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arcn  closepath gsave 0.75
 setgray  1. .setopacityalpha  fill  grestore gsave 0.1 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 128.18544 -154.73181 /y ED /x ED /r 26.54637 def /c 57.2957 r Div
def /angleA 89.999990 0.0 c mul 2 div add def /angleB 160.52878 0.0
c mul 2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  218.82301 -90.64061
/y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 205.52878
0.0 c mul 2 div sub def /angleB 180.00000 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  [ 128.18544 -128.18544 90.64061 -90.64061  
/currentpoint load stopped pop /Lineto /lineto load def 0  setlinejoin
false Line  closepath gsave 0.1 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 128.18544 -154.73181 /y ED /x ED /r 26.54637 def /c 57.2957 r Div
def /angleA 90.000058 0.0 c mul 2 div add def /angleB 160.52880 0.0
c mul 2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  112.63141 -165.72722
/y ED /x ED /r 21.99384 def /c 57.2957 r Div def /angleA 115.52873
0.0 c mul 2 div sub def /angleB 60.722388 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  141.4571 -141.4571 /y ED /x ED /r 18.7724 def
/c 57.2957 r Div def /angleA 195.72237 0.0 c mul 2 div sub def /angleB
135.00006 0.0 c mul 2 div add def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arcn  closepath gsave 0.75
 setgray  1. .setopacityalpha  fill  grestore gsave 0.1 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 -90.64061 181.28123 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 315.00002 0.0 c mul 2 div add def /angleB 0 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  -37.54482 196.83221 /y
ED /x ED /r 21.99384 def /c 57.2957 r Div def /angleA 224.99997 0.0
c mul 2 div add def /angleB 289.47120 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  -64.09119 192.27664 /y ED /x ED /r 37.54482
def /c 57.2957 r Div def /angleA 334.47121 0.0 c mul 2 div sub def
/angleB 269.99999 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 -90.64061 181.28123 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 314.99999 0.0 c mul 2 div add def /angleB 360.00000 0.0 c mul
2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  -61.60219 189.78459
/y ED /x ED /r 12.02869 def /c 57.2957 r Div def /angleA 314.99999
0.0 c mul 2 div sub def /angleB 240.72239 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  -154.73181 154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 15.722378 0.0 c mul 2 div sub def
/angleB 359.99999 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 200.05061 0.0 /y ED /x ED /r 18.7724 def /c 57.2957 r Div def /angleA
180.00000 0.0 c mul 2 div sub def /angleB 119.27761 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  198.84105 14.13173 /y
ED /x ED /r 8.27846 def /c 57.2957 r Div def /angleA 164.27739 0.0
c mul 2 div add def /angleB 237.34996 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  200.05061 -18.7724 /y ED /x ED /r 26.54637 def
/c 57.2957 r Div def /angleA 102.35009 0.0 c mul 2 div add def /angleB
134.99998 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arc  closepath gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 200.05061 0.0 /y ED /x ED /r 18.7724 def /c 57.2957 r Div def /angleA
180.00000 0.0 c mul 2 div sub def /angleB 119.27762 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  196.83221 37.54482 /y
ED /x ED /r 21.99384 def /c 57.2957 r Div def /angleA 254.27760 0.0
c mul 2 div sub def /angleB 199.47122 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  200.05061 18.7724 /y ED /x ED /r 26.54637 def
/c 57.2957 r Div def /angleA 154.47120 0.0 c mul 2 div add def /angleB
224.99999 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arc  closepath gsave 0.75
 setgray  1. .setopacityalpha  fill  grestore gsave 0.1 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 154.73181 -128.18544 /y ED /x ED /r 26.54637 def /c 57.2957 r Div
def /angleA 180.00000 0.0 c mul 2 div add def /angleB 212.64987 0.0
c mul 2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  130.60759 -150.59259
/y ED /x ED /r 8.27846 def /c 57.2957 r Div def /angleA 77.649955 0.0
c mul 2 div add def /angleB 150.72229 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  141.4571 -141.4571 /y ED /x ED /r 18.7724 def
/c 57.2957 r Div def /angleA 195.72247 0.0 c mul 2 div sub def /angleB
135.00008 0.0 c mul 2 div add def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arcn  closepath gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 154.73181 -128.18544 /y ED /x ED /r 26.54637 def /c 57.2957 r Div
def /angleA 179.99997 0.0 c mul 2 div add def /angleB 212.64994 0.0
c mul 2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  137.98952 -143.73642
/y ED /x ED /r 5.74385 def /c 57.2957 r Div def /angleA 167.64920 0.0
c mul 2 div sub def /angleB 89.999305 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  [ 128.18544 -128.18544 137.98952 -137.98952
  /currentpoint load stopped pop /Lineto /lineto load def 0  setlinejoin
false Line  closepath gsave 0.75  setgray  1. .setopacityalpha  fill
 grestore gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 90.64061 181.28123 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 225.00003 0.0 c mul 2 div sub def /angleB 180.00002 0.0 c mul
2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  61.60219 189.78459
/y ED /x ED /r 12.02869 def /c 57.2957 r Div def /angleA 225.00008
0.0 c mul 2 div add def /angleB 299.27767 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  154.73181 154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 164.27763 0.0 c mul 2 div add def
/angleB 180.00001 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  closepath
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 90.64061 181.28123 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 225.00003 0.0 c mul 2 div sub def /angleB 180.00002 0.0 c mul
2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  37.54482 196.83221
/y ED /x ED /r 21.99384 def /c 57.2957 r Div def /angleA 314.99998
0.0 c mul 2 div sub def /angleB 250.52876 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  64.09119 192.27664 /y ED /x ED /r 37.54482 def
/c 57.2957 r Div def /angleA 205.52877 0.0 c mul 2 div add def /angleB
269.99998 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arc  closepath gsave 0.75
 setgray  1. .setopacityalpha  fill  grestore gsave 0.1 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 0.0 218.82301 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
315.00002 0.0 c mul 2 div add def /angleB 330.72241 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  90.64061 177.7559 /y ED
/x ED /r 12.02869 def /c 57.2957 r Div def /angleA 195.72234 0.0 c
mul 2 div add def /angleB 269.99963 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  64.09119 192.27664 /y ED /x ED /r 37.54482 def
/c 57.2957 r Div def /angleA 314.99996 0.0 c mul 2 div sub def /angleB
269.99993 0.0 c mul 2 div add def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arcn  closepath gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 0.0 218.82301 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
315.00001 0.0 c mul 2 div add def /angleB 330.72240 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  76.31741 184.24738 /y
ED /x ED /r 10.12622 def /c 57.2957 r Div def /angleA 285.72229 0.0
c mul 2 div sub def /angleB 209.27753 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  154.73181 154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 164.27764 0.0 c mul 2 div add def
/angleB 180.00001 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 218.82301 0.0 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
135.00001 0.0 c mul 2 div sub def /angleB 119.27763 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  184.24738 76.31741 /y
ED /x ED /r 10.12622 def /c 57.2957 r Div def /angleA 164.27750 0.0
c mul 2 div add def /angleB 240.72228 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  154.73181 154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 285.72239 0.0 c mul 2 div sub def
/angleB 269.99999 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 218.82301 0.0 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
135.00001 0.0 c mul 2 div sub def /angleB 119.27762 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  177.7559 90.64061 /y ED
/x ED /r 12.02869 def /c 57.2957 r Div def /angleA 254.27770 0.0 c
mul 2 div sub def /angleB 180.00005 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  192.27664 64.09119 /y ED /x ED /r 37.54482 def
/c 57.2957 r Div def /angleA 135.00001 0.0 c mul 2 div add def /angleB
180.00003 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arc  closepath gsave 0.75
 setgray  1. .setopacityalpha  fill  grestore gsave 0.1 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 181.28123 90.64061 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 224.99997 0.0 c mul 2 div add def /angleB 269.99998 0.0 c mul
2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  196.83221 37.54482
/y ED /x ED /r 21.99384 def /c 57.2957 r Div def /angleA 134.99999
0.0 c mul 2 div add def /angleB 199.47122 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  192.27664 64.09119 /y ED /x ED /r 37.54482 def
/c 57.2957 r Div def /angleA 244.47123 0.0 c mul 2 div sub def /angleB
180.00001 0.0 c mul 2 div add def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arcn  closepath gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 181.28123 90.64061 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 224.99999 0.0 c mul 2 div add def /angleB 270.00000 0.0 c mul
2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  189.78459 61.60219
/y ED /x ED /r 12.02869 def /c 57.2957 r Div def /angleA 225.00001
0.0 c mul 2 div sub def /angleB 150.72240 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  154.73181 154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 285.72236 0.0 c mul 2 div sub def
/angleB 269.99998 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 181.28123 90.64061 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 225.00001 0.0 c mul 2 div sub def /angleB 160.52879 0.0 c mul
2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  165.72722 112.63141
/y ED /x ED /r 21.99384 def /c 57.2957 r Div def /angleA 205.52875
0.0 c mul 2 div add def /angleB 270.00000 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  192.27664 64.09119 /y ED /x ED /r 37.54482 def
/c 57.2957 r Div def /angleA 135.00001 0.0 c mul 2 div add def /angleB
180.00003 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arc  closepath gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 181.28123 90.64061 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def
/angleA 225.00002 0.0 c mul 2 div sub def /angleB 160.52880 0.0 c mul
2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  90.64061 218.82301
/y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 295.52879
0.0 c mul 2 div sub def /angleB 270.00001 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  154.73181 154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 225.00000 0.0 c mul 2 div add def
/angleB 270.00000 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 218.82301 0.0 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
224.99999 0.0 c mul 2 div add def /angleB 240.72238 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  177.7559 -90.64061 /y
ED /x ED /r 12.02869 def /c 57.2957 r Div def /angleA 105.72227 0.0
c mul 2 div add def /angleB 179.99985 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  192.27664 -64.09119 /y ED /x ED /r 37.54482
def /c 57.2957 r Div def /angleA 225.00000 0.0 c mul 2 div sub def
/angleB 179.99998 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 218.82301 0.0 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
225.00001 0.0 c mul 2 div add def /angleB 240.72240 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def  184.24738 -76.31741 /y
ED /x ED /r 10.12622 def /c 57.2957 r Div def /angleA 195.72251 0.0
c mul 2 div sub def /angleB 119.27755 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  154.73181 -154.73181 /y ED /x ED /r 90.64061
def /c 57.2957 r Div def /angleA 74.277641 0.0 c mul 2 div add def
/angleB 90.000031 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 154.73181 -128.18544 /y ED /x ED /r 26.54637 def /c 57.2957 r Div
def /angleA 70.528807 0.0 c mul 2 div add def /angleB 109.47128 0.0
c mul 2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  165.72722 -112.63141
/y ED /x ED /r 21.99384 def /c 57.2957 r Div def /angleA 154.47131
0.0 c mul 2 div sub def /angleB 89.999992 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  173.50423 -98.41458 /y ED /x ED /r 10.99539
def /c 57.2957 r Div def /angleA 135.00000 0.0 c mul 2 div add def
/angleB 205.52878 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  closepath
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 154.73181 -128.18544 /y ED /x ED /r 26.54637 def /c 57.2957 r Div
def /angleA 70.528786 0.0 c mul 2 div add def /angleB 109.47124 0.0
c mul 2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  90.64061 -218.82301
/y ED /x ED /r 128.18544 def /c 57.2957 r Div def /angleA 64.471280
0.0 c mul 2 div sub def /angleB 57.350173 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  166.56905 -109.41302 /y ED /x ED /r 6.93518
def /c 57.2957 r Div def /angleA 192.35033 0.0 c mul 2 div sub def
/angleB 115.52895 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 169.25255 -105.15831 /y ED /x ED /r 6.01434 def /c 57.2957 r Div def
/angleA 160.52851 0.0 c mul 2 div sub def /angleB 90.000142 0.0 c mul
2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  171.47412 -101.36554
/y ED /x ED /r 3.14241 def /c 57.2957 r Div def /angleA 135.00162 0.0
c mul 2 div add def /angleB 207.27782 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  166.56905 -109.41302 /y ED /x ED /r 6.93518
def /c 57.2957 r Div def /angleA 72.276752 0.0 c mul 2 div add def
/angleB 115.52785 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  closepath
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 169.25255 -105.15831 /y ED /x ED /r 6.01434 def /c 57.2957 r Div def
/angleA 160.52913 0.0 c mul 2 div sub def /angleB 90.000623 0.0 c mul
2 div add def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arcn   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  177.7559 -90.64061
/y ED /x ED /r 12.02869 def /c 57.2957 r Div def /angleA 225.00018
0.0 c mul 2 div sub def /angleB 180.00030 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  173.50423 -98.41458 /y ED /x ED /r 10.99539
def /c 57.2957 r Div def /angleA 135.00002 0.0 c mul 2 div add def
/angleB 205.52866 0.0 c mul 2 div sub def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arc  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 195.14857 0.0 181.28123 0.0   /currentpoint load stopped pop /Lineto
/lineto load def 0  setlinejoin false Line   0.1 SLW 0  setgray  /ArrowA
{ /lineto load stopped { moveto } if } def /ArrowB { } def  199.21182
-4.06325 /y ED /x ED /r 5.74385 def /c 57.2957 r Div def /angleA 135.00040
0.0 c mul 2 div add def /angleB 212.65037 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  200.05061 18.7724 /y ED /x ED /r 26.54637 def
/c 57.2957 r Div def /angleA 257.64991 0.0 c mul 2 div sub def /angleB
224.99998 0.0 c mul 2 div add def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arcn  closepath gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 [ 195.14857 0.0 181.28123 0.0   /currentpoint load stopped pop /Lineto
/lineto load def 0  setlinejoin false Line   0.1 SLW 0  setgray  /ArrowA
{ /lineto load stopped { moveto } if } def /ArrowB { } def  199.21182
4.06325 /y ED /x ED /r 5.74385 def /c 57.2957 r Div def /angleA 225.00029
0.0 c mul 2 div sub def /angleB 147.35046 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  200.05061 -18.7724 /y ED /x ED /r 26.54637 def
/c 57.2957 r Div def /angleA 102.35013 0.0 c mul 2 div add def /angleB
135.00008 0.0 c mul 2 div sub def /angleAtoB angleB angleA gt { true
}{ false } ifelse def x y r angleA angleB arc  closepath gsave 0.75
 setgray  1. .setopacityalpha  fill  grestore gsave 0.1 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 169.25255 -105.15831 /y ED /x ED /r 6.01434 def /c 57.2957 r Div def
/angleA 160.52952 0.0 c mul 2 div add def /angleB 216.87043 0.0 c mul
2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  163.77309 -113.44284
/y ED /x ED /r 4.72273 def /c 57.2957 r Div def /angleA 81.870364 0.0
c mul 2 div add def /angleB 147.35061 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  166.56905 -109.41302 /y ED /x ED /r 6.93518
def /c 57.2957 r Div def /angleA 192.35029 0.0 c mul 2 div sub def
/angleB 115.52906 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.1 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.1 SLW 0  setgray   0.1 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
 169.25255 -105.15831 /y ED /x ED /r 6.01434 def /c 57.2957 r Div def
/angleA 160.52864 0.0 c mul 2 div add def /angleB 216.87028 0.0 c mul
2 div sub def /angleAtoB angleB angleA gt { true }{ false } ifelse
def x y r angleA angleB arc   0.1 SLW 0  setgray  /ArrowA { /lineto
load stopped { moveto } if } def /ArrowB { } def  166.65413 -109.08481
/y ED /x ED /r 2.23676 def /c 57.2957 r Div def /angleA 171.86891 0.0
c mul 2 div sub def /angleB 95.131316 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
  0.1 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def  173.50423 -98.41458 /y ED /x ED /r 10.99539
def /c 57.2957 r Div def /angleA 230.13217 0.0 c mul 2 div sub def
/angleB 205.52896 0.0 c mul 2 div add def /angleAtoB angleB angleA
gt { true }{ false } ifelse def x y r angleA angleB arcn  closepath
gsave 0.75  setgray  1. .setopacityalpha  fill  grestore gsave 0.1
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 22047 -22047 a
tx@Dict begin { -41.58679 -100.39607 } PutCoor PutBegin  end

22047 -22047 a 21539 -21892 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end


@endspecial Fc(s)22058 -21726 y Fb(1)22047 -22047 y
tx@Dict begin  PutEnd  end

22047 -22047 a 22047 -22047 a
tx@Dict begin { 72.4426 174.89005 } PutCoor PutBegin  end
 22047 -22047 a 21730 -21988
a
 currentpoint currentpoint translate 0.37753616 0.37753616 scale neg
exch neg exch translate
 21730 -21988 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fc(s)22581 -21822 y Fb(1)21730 -21988 y
 currentpoint currentpoint translate 1 0.37753616 div 1 0.37753616
div scale neg exch neg exch translate
 21730 -21988
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 41.58679 -100.39607 } PutCoor PutBegin  end
 22047
-22047 a 21539 -21892 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fc(s)22058 -21726 y Fb(2)22047 -22047 y
tx@Dict begin  PutEnd  end
 22047 -22047
a 22047 -22047 a
tx@Dict begin { -72.4426 174.89005 } PutCoor PutBegin  end
 22047 -22047 a 21730 -21988 a
 currentpoint currentpoint translate 0.37753616 0.37753616 scale neg
exch neg exch translate
 21730
-21988 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fc(s)22581 -21822 y Fb(2)21730 -21988 y
 currentpoint currentpoint translate 1 0.37753616 div 1 0.37753616
div scale neg exch neg exch translate
 21730 -21988
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { -100.39607 41.58679 } PutCoor PutBegin  end
 22047
-22047 a 21539 -21892 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fc(s)22058 -21726 y Fb(3)22047 -22047 y
tx@Dict begin  PutEnd  end
 22047 -22047
a 22047 -22047 a
tx@Dict begin { 174.89005 -72.4426 } PutCoor PutBegin  end
 22047 -22047 a 21730 -21988 a
 currentpoint currentpoint translate 0.37753616 0.37753616 scale neg
exch neg exch translate
 21730
-21988 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fc(s)22581 -21822 y Fb(3)21730 -21988 y
 currentpoint currentpoint translate 1 0.37753616 div 1 0.37753616
div scale neg exch neg exch translate
 21730 -21988
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { -100.39607 -41.58679 } PutCoor PutBegin  end
 22047
-22047 a 21539 -21892 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fc(s)22058 -21726 y Fb(4)22047 -22047 y
tx@Dict begin  PutEnd  end
 22047 -22047
a 22047 -22047 a
tx@Dict begin { 174.89005 72.4426 } PutCoor PutBegin  end
 22047 -22047 a 21730 -21988 a
 currentpoint currentpoint translate 0.37753616 0.37753616 scale neg
exch neg exch translate
 21730
-21988 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fc(s)22581 -21822 y Fb(4)21730 -21988 y
 currentpoint currentpoint translate 1 0.37753616 div 1 0.37753616
div scale neg exch neg exch translate
 21730 -21988
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 168.1676 -83.37721 } PutCoor PutBegin  end
 22047
-22047 a 21730 -21988 a
 currentpoint currentpoint translate 0.37753616 0.37753616 scale neg
exch neg exch translate
 21730 -21988 a 332 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22581 -21822 y Fb(5)21730
-21988 y
 currentpoint currentpoint translate 1 0.37753616 div 1 0.37753616
div scale neg exch neg exch translate
 21730 -21988 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a
22047 -22047 a
tx@Dict begin { 193.49835 3.44327 } PutCoor PutBegin  end
 22047 -22047 a 21865 -22013 a
 currentpoint currentpoint translate 0.21699503 0.21699503 scale neg
exch neg exch translate
 21865 -22013
a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22716
-21847 y Fb(5)21865 -22013 y
 currentpoint currentpoint translate 1 0.21699503 div 1 0.21699503
div scale neg exch neg exch translate
 21865 -22013 a 22047 -22047
a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 168.1676 83.37721 } PutCoor PutBegin  end
 22047 -22047 a 21730
-21988 a
 currentpoint currentpoint translate 0.37753616 0.37753616 scale neg
exch neg exch translate
 21730 -21988 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end


@endspecial Fc(s)22581 -21822 y Fb(6)21730 -21988 y
 currentpoint currentpoint translate 1 0.37753616 div 1 0.37753616
div scale neg exch neg exch translate

21730 -21988 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047
a
tx@Dict begin { 193.49835 -3.44327 } PutCoor PutBegin  end
 22047 -22047 a 21865 -22013 a
 currentpoint currentpoint translate 0.21699503 0.21699503 scale neg
exch neg exch translate
 21865 -22013 a 332 w
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22716 -21847
y Fb(6)21865 -22013 y
 currentpoint currentpoint translate 1 0.21699503 div 1 0.21699503
div scale neg exch neg exch translate
 21865 -22013 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047
-22047 a 22047 -22047 a
tx@Dict begin { 17.7847 150.44975 } PutCoor PutBegin  end
 22047 -22047 a 21539 -21892 a
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22058 -21726
y Fb(7)22047 -22047 y
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 191.10355 -11.1899 } PutCoor PutBegin  end
 22047
-22047 a 21798 -22001 a
 currentpoint currentpoint translate 0.29691553 0.29691553 scale neg
exch neg exch translate
 21798 -22001 a 332 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22649 -21835 y Fb(7)21798
-22001 y
 currentpoint currentpoint translate 1 0.29691553 div 1 0.29691553
div scale neg exch neg exch translate
 21798 -22001 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a
22047 -22047 a
tx@Dict begin { 93.80734 118.96182 } PutCoor PutBegin  end
 22047 -22047 a 21453 -21937 a
 currentpoint currentpoint translate 0.70680034 0.70680034 scale neg
exch neg exch translate
 21453 -21937
a 333 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22305
-21771 y Fb(8)21453 -21937 y
 currentpoint currentpoint translate 1 0.70680034 div 1 0.70680034
div scale neg exch neg exch translate
 21453 -21937 a 22047 -22047
a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 113.35167 -143.74857 } PutCoor PutBegin  end
 22047 -22047 a 21567
-21958 a
 currentpoint currentpoint translate 0.57167666 0.57167666 scale neg
exch neg exch translate
 21567 -21958 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end


@endspecial Fc(s)22418 -21792 y Fb(8)21567 -21958 y
 currentpoint currentpoint translate 1 0.57167666 div 1 0.57167666
div scale neg exch neg exch translate

21567 -21958 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047
a
tx@Dict begin { 94.02919 153.99635 } PutCoor PutBegin  end
 22047 -22047 a 21453 -21937 a
 currentpoint currentpoint translate 0.70680034 0.70680034 scale neg
exch neg exch translate
 21453 -21937 a 333 w
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22305 -21771
y Fb(9)21453 -21937 y
 currentpoint currentpoint translate 1 0.70680034 div 1 0.70680034
div scale neg exch neg exch translate
 21453 -21937 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047
-22047 a 22047 -22047 a
tx@Dict begin { 161.8068 -109.14862 } PutCoor PutBegin  end
 22047 -22047 a 21977 -22034 a
 currentpoint currentpoint translate 0.083686541 0.083686541 scale
neg exch neg exch translate

21977 -22034 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 12.17363
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fc(s)22828 -21868 y Fb(9)21977 -22034 y
 currentpoint currentpoint translate 1 0.083686541 div 1 0.083686541
div scale neg exch neg exch translate
 21977 -22034
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 83.37721 168.1676 } PutCoor PutBegin  end
 22047
-22047 a 21647 -21988 a
 currentpoint currentpoint translate 0.37753616 0.37753616 scale neg
exch neg exch translate
 21647 -21988 a 332 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22498 -21822 y Fb(10)21647
-21988 y
 currentpoint currentpoint translate 1 0.37753616 div 1 0.37753616
div scale neg exch neg exch translate
 21647 -21988 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a
22047 -22047 a
tx@Dict begin { 181.79788 21.49239 } PutCoor PutBegin  end
 22047 -22047 a 21732 -22001 a
 currentpoint currentpoint translate 0.29691553 0.29691553 scale neg
exch neg exch translate
 21732 -22001
a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22583
-21835 y Fb(10)21732 -22001 y
 currentpoint currentpoint translate 1 0.29691553 div 1 0.29691553
div scale neg exch neg exch translate
 21732 -22001 a 22047 -22047
a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { -42.4043 175.38239 } PutCoor PutBegin  end
 22047 -22047 a 21583
-21979 a
 currentpoint currentpoint translate 0.43754238 0.43754238 scale neg
exch neg exch translate
 21583 -21979 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end


@endspecial Fc(s)22434 -21813 y Fb(11)21583 -21979 y
 currentpoint currentpoint translate 1 0.43754238 div 1 0.43754238
div scale neg exch neg exch translate

21583 -21979 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047
a
tx@Dict begin { 165.11636 -107.46193 } PutCoor PutBegin  end
 22047 -22047 a 21958 -22034 a
 currentpoint currentpoint translate 0.083686541 0.083686541 scale
neg exch neg exch translate
 21958 -22034 a 333 w
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22810 -21868
y Fb(11)21958 -22034 y
 currentpoint currentpoint translate 1 0.083686541 div 1 0.083686541
div scale neg exch neg exch translate
 21958 -22034 a 22047 -22047 a
tx@Dict begin  PutEnd  end

22047 -22047 a 22047 -22047 a
tx@Dict begin { -59.955 177.86835 } PutCoor PutBegin  end
 22047 -22047 a 21583 -21979
a
 currentpoint currentpoint translate 0.43754238 0.43754238 scale neg
exch neg exch translate
 21583 -21979 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fc(s)22434 -21813 y Fb(12)21583 -21979 y
 currentpoint currentpoint translate 1 0.43754238 div 1 0.43754238
div scale neg exch neg exch translate
 21583 -21979
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 93.80734 -118.96182 } PutCoor PutBegin  end
 22047
-22047 a 21441 -21958 a
 currentpoint currentpoint translate 0.57167666 0.57167666 scale neg
exch neg exch translate
 21441 -21958 a 332 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22292 -21792 y Fb(12)21441
-21958 y
 currentpoint currentpoint translate 1 0.57167666 div 1 0.57167666
div scale neg exch neg exch translate
 21441 -21958 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a
22047 -22047 a
tx@Dict begin { -94.02919 153.99635 } PutCoor PutBegin  end
 22047 -22047 a 21297 -21937 a
 currentpoint currentpoint translate 0.70680034 0.70680034 scale neg
exch neg exch translate
 21297 -21937
a 333 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22149
-21771 y Fb(13)21297 -21937 y
 currentpoint currentpoint translate 1 0.70680034 div 1 0.70680034
div scale neg exch neg exch translate
 21297 -21937 a 22047 -22047
a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 166.64502 -95.24179 } PutCoor PutBegin  end
 22047 -22047 a 21929
-22030 a
 currentpoint currentpoint translate 0.11163647 0.11163647 scale neg
exch neg exch translate
 21929 -22030 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end


@endspecial Fc(s)22780 -21864 y Fb(13)21929 -22030 y
 currentpoint currentpoint translate 1 0.11163647 div 1 0.11163647
div scale neg exch neg exch translate

21929 -22030 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047
a
tx@Dict begin { -93.80734 118.96182 } PutCoor PutBegin  end
 22047 -22047 a 21297 -21937 a
 currentpoint currentpoint translate 0.70680034 0.70680034 scale neg
exch neg exch translate
 21297 -21937 a 333 w
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22149 -21771
y Fb(14)21297 -21937 y
 currentpoint currentpoint translate 1 0.70680034 div 1 0.70680034
div scale neg exch neg exch translate
 21297 -21937 a 22047 -22047 a
tx@Dict begin  PutEnd  end

22047 -22047 a 22047 -22047 a
tx@Dict begin { 139.25984 -134.3882 } PutCoor PutBegin  end
 22047 -22047 a 21817 -22013
a
 currentpoint currentpoint translate 0.21699503 0.21699503 scale neg
exch neg exch translate
 21817 -22013 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fc(s)22668 -21847 y Fb(14)21817 -22013 y
 currentpoint currentpoint translate 1 0.21699503 div 1 0.21699503
div scale neg exch neg exch translate
 21817 -22013
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { -83.37721 168.1676 } PutCoor PutBegin  end
 22047
-22047 a 21647 -21988 a
 currentpoint currentpoint translate 0.37753616 0.37753616 scale neg
exch neg exch translate
 21647 -21988 a 332 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22498 -21822 y Fb(15)21647
-21988 y
 currentpoint currentpoint translate 1 0.37753616 div 1 0.37753616
div scale neg exch neg exch translate
 21647 -21988 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a
22047 -22047 a
tx@Dict begin { 191.10355 11.1899 } PutCoor PutBegin  end
 22047 -22047 a 21732 -22001 a
 currentpoint currentpoint translate 0.29691553 0.29691553 scale neg
exch neg exch translate
 21732 -22001
a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22583
-21835 y Fb(15)21732 -22001 y
 currentpoint currentpoint translate 1 0.29691553 div 1 0.29691553
div scale neg exch neg exch translate
 21732 -22001 a 22047 -22047
a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 177.86835 -59.955 } PutCoor PutBegin  end
 22047 -22047 a 21583
-21979 a
 currentpoint currentpoint translate 0.43754238 0.43754238 scale neg
exch neg exch translate
 21583 -21979 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end


@endspecial Fc(s)22434 -21813 y Fb(16)21583 -21979 y
 currentpoint currentpoint translate 1 0.43754238 div 1 0.43754238
div scale neg exch neg exch translate

21583 -21979 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047
a
tx@Dict begin { 134.3882 -139.25984 } PutCoor PutBegin  end
 22047 -22047 a 21817 -22013 a
 currentpoint currentpoint translate 0.21699503 0.21699503 scale neg
exch neg exch translate
 21817 -22013 a 332 w
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22668 -21847
y Fb(16)21817 -22013 y
 currentpoint currentpoint translate 1 0.21699503 div 1 0.21699503
div scale neg exch neg exch translate
 21817 -22013 a 22047 -22047 a
tx@Dict begin  PutEnd  end

22047 -22047 a 22047 -22047 a
tx@Dict begin { 175.38239 -42.4043 } PutCoor PutBegin  end
 22047 -22047 a 21583 -21979
a
 currentpoint currentpoint translate 0.43754238 0.43754238 scale neg
exch neg exch translate
 21583 -21979 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fc(s)22434 -21813 y Fb(17)21583 -21979 y
 currentpoint currentpoint translate 1 0.43754238 div 1 0.43754238
div scale neg exch neg exch translate
 21583 -21979
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 166.75443 -105.71446 } PutCoor PutBegin  end
 22047
-22047 a 21976 -22037 a
 currentpoint currentpoint translate 0.066881093 0.066881093 scale
neg exch neg exch translate
 21976 -22037 a 332 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22827 -21871 y Fb(17)21976
-22037 y
 currentpoint currentpoint translate 1 0.066881093 div 1 0.066881093
div scale neg exch neg exch translate
 21976 -22037 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a
22047 -22047 a
tx@Dict begin { 175.38239 42.4043 } PutCoor PutBegin  end
 22047 -22047 a 21583 -21979 a
 currentpoint currentpoint translate 0.43754238 0.43754238 scale neg
exch neg exch translate
 21583 -21979
a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22434
-21813 y Fb(18)21583 -21979 y
 currentpoint currentpoint translate 1 0.43754238 div 1 0.43754238
div scale neg exch neg exch translate
 21583 -21979 a 22047 -22047
a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 152.96004 -106.80853 } PutCoor PutBegin  end
 22047 -22047 a 21772
-22007 a
 currentpoint currentpoint translate 0.25957580 0.25957580 scale neg
exch neg exch translate
 21772 -22007 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end


@endspecial Fc(s)22623 -21841 y Fb(18)21772 -22007 y
 currentpoint currentpoint translate 1 0.25957580 div 1 0.25957580
div scale neg exch neg exch translate

21772 -22007 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047
a
tx@Dict begin { 177.86835 59.955 } PutCoor PutBegin  end
 22047 -22047 a 21583 -21979 a
 currentpoint currentpoint translate 0.43754238 0.43754238 scale neg
exch neg exch translate
 21583 -21979 a 332 w
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22434 -21813
y Fb(19)21583 -21979 y
 currentpoint currentpoint translate 1 0.43754238 div 1 0.43754238
div scale neg exch neg exch translate
 21583 -21979 a 22047 -22047 a
tx@Dict begin  PutEnd  end

22047 -22047 a 22047 -22047 a
tx@Dict begin { 143.74857 -113.35167 } PutCoor PutBegin  end
 22047 -22047 a 21441 -21958
a
 currentpoint currentpoint translate 0.57167666 0.57167666 scale neg
exch neg exch translate
 21441 -21958 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fc(s)22292 -21792 y Fb(19)21441 -21958 y
 currentpoint currentpoint translate 1 0.57167666 div 1 0.57167666
div scale neg exch neg exch translate
 21441 -21958
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 59.955 177.86835 } PutCoor PutBegin  end
 22047
-22047 a 21583 -21979 a
 currentpoint currentpoint translate 0.43754238 0.43754238 scale neg
exch neg exch translate
 21583 -21979 a 332 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22434 -21813 y Fb(20)21583
-21979 y
 currentpoint currentpoint translate 1 0.43754238 div 1 0.43754238
div scale neg exch neg exch translate
 21583 -21979 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a
22047 -22047 a
tx@Dict begin { 143.04047 -127.21597 } PutCoor PutBegin  end
 22047 -22047 a 21817 -22013 a
 currentpoint currentpoint translate 0.21699503 0.21699503 scale neg
exch neg exch translate
 21817 -22013
a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22668
-21847 y Fb(20)21817 -22013 y
 currentpoint currentpoint translate 1 0.21699503 div 1 0.21699503
div scale neg exch neg exch translate
 21817 -22013 a 22047 -22047
a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 42.4043 175.38239 } PutCoor PutBegin  end
 22047 -22047 a 21583
-21979 a
 currentpoint currentpoint translate 0.43754238 0.43754238 scale neg
exch neg exch translate
 21583 -21979 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end


@endspecial Fc(s)22434 -21813 y Fb(21)21583 -21979 y
 currentpoint currentpoint translate 1 0.43754238 div 1 0.43754238
div scale neg exch neg exch translate

21583 -21979 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047
a
tx@Dict begin { 168.36818 -100.88232 } PutCoor PutBegin  end
 22047 -22047 a 21929 -22030 a
 currentpoint currentpoint translate 0.11163647 0.11163647 scale neg
exch neg exch translate
 21929 -22030 a 332 w
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22780 -21864
y Fb(21)21929 -22030 y
 currentpoint currentpoint translate 1 0.11163647 div 1 0.11163647
div scale neg exch neg exch translate
 21929 -22030 a 22047 -22047 a
tx@Dict begin  PutEnd  end

22047 -22047 a 22047 -22047 a
tx@Dict begin { -17.7847 150.44975 } PutCoor PutBegin  end
 22047 -22047 a 21319 -21892
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)21838 -21726
y Fb(22)22047 -22047 y
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 181.79788 -21.49239 } PutCoor PutBegin  end

22047 -22047 a 21732 -22001 a
 currentpoint currentpoint translate 0.29691553 0.29691553 scale neg
exch neg exch translate
 21732 -22001 a 332 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22583 -21835 y Fb(22)21732
-22001 y
 currentpoint currentpoint translate 1 0.29691553 div 1 0.29691553
div scale neg exch neg exch translate
 21732 -22001 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a
22047 -22047 a
tx@Dict begin { 153.99635 94.02919 } PutCoor PutBegin  end
 22047 -22047 a 21297 -21937 a
 currentpoint currentpoint translate 0.70680034 0.70680034 scale neg
exch neg exch translate
 21297 -21937
a 333 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22149
-21771 y Fb(23)21297 -21937 y
 currentpoint currentpoint translate 1 0.70680034 div 1 0.70680034
div scale neg exch neg exch translate
 21297 -21937 a 22047 -22047
a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 167.8029 -103.74513 } PutCoor PutBegin  end
 22047 -22047 a 21976
-22037 a
 currentpoint currentpoint translate 0.066881093 0.066881093 scale
neg exch neg exch translate
 21976 -22037 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end


@endspecial Fc(s)22827 -21871 y Fb(23)21976 -22037 y
 currentpoint currentpoint translate 1 0.066881093 div 1 0.066881093
div scale neg exch neg exch translate

21976 -22037 a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047
a
tx@Dict begin { 118.96182 93.80734 } PutCoor PutBegin  end
 22047 -22047 a 21297 -21937 a
 currentpoint currentpoint translate 0.70680034 0.70680034 scale neg
exch neg exch translate
 21297 -21937 a 333 w
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 0.9 0.9 1  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 0.9 0.9 1  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial Fc(s)22149 -21771
y Fb(24)21297 -21937 y
 currentpoint currentpoint translate 1 0.70680034 div 1 0.70680034
div scale neg exch neg exch translate
 21297 -21937 a 22047 -22047 a
tx@Dict begin  PutEnd  end

22047 -22047 a 22047 -22047 a
tx@Dict begin { 127.21597 -143.04047 } PutCoor PutBegin  end
 22047 -22047 a 21817 -22013
a
 currentpoint currentpoint translate 0.21699503 0.21699503 scale neg
exch neg exch translate
 21817 -22013 a 332 w @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.0 SLW 1 0.2 0.2  setrgbcolor  0. true 3.0 neg 4.49998 neg 16.15976
7.30554 .5 Frame  gsave 1 0.2 0.2  setrgbcolor  1. .setopacityalpha
 fill  grestore end
 
@endspecial
Fc(s)22668 -21847 y Fb(24)21817 -22013 y
 currentpoint currentpoint translate 1 0.21699503 div 1 0.21699503
div scale neg exch neg exch translate
 21817 -22013
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 128.18544
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false Line  gsave
1.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale 1  setgray (b)
show grestore gsave 1.  1.  scale (c) show grestore } bind def   1.
.setopacityalpha  newpath n { transform floor .5 add exch floor .5
add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 128.18544 0.0   false
NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 90.64061 -90.64061
  false NArray  /DS 7.0 0. CLW mul add 2 div def /StandardSymL 0. [1.8
0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale
<B4> show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0
128.18544 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false Line
 gsave 1.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale 1  setgray (b)
show grestore gsave 1.  1.  scale (c) show grestore } bind def   1.
.setopacityalpha  newpath n { transform floor .5 add exch floor .5
add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 128.18544   false
NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 90.64061 90.64061
  false NArray  /DS 7.0 0. CLW mul add 2 div def /StandardSymL 0. [1.8
0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale
<B4> show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  218.82301
0.0 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA 225.00000
0.0 c mul 2 div sub def /angleB 180.00000 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
 gsave 1.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 154.73181 -64.09119
  false NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 128.18544 0.0   false
NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 176.09656 -30.21454
  false NArray  /DS 7.0 0. CLW mul add 2 div def /StandardSymL 0. [1.8
0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale
<B4> show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  0.0
218.82301 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
224.99999 0.0 c mul 2 div sub def /angleB 209.27760 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn  gsave 0.5663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -64.09119 154.73181
  false NArray  /DS 2.64275 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -79.0617 174.498
  false NArray  /DS 2.64275 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -67.4828 179.29367
  false NArray  /DS 2.64275 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.32549 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  128.18544
-154.73181 /y ED /x ED /r 26.54637 def /c 57.2957 r Div def /angleA
90.000035 0.0 c mul 2 div sub def /angleB 57.350152 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn  gsave 0.32549 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 128.18544 -128.18544
  false NArray  /DS 1.51897 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 142.50558 -132.37936
  false NArray  /DS 1.51897 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 137.98952 -137.98952
  false NArray  /DS 1.51897 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ 0.0
-128.18544 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 1.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale 1  setgray (b)
show grestore gsave 1.  1.  scale (c) show grestore } bind def   1.
.setopacityalpha  newpath n { transform floor .5 add exch floor .5
add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 -128.18544  
false NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -90.64061 -90.64061
  false NArray  /DS 7.0 0. CLW mul add 2 div def /StandardSymL 0. [1.8
0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale
<B4> show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  218.82301
0.0 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA 135.00000
0.0 c mul 2 div add def /angleB 180.00000 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
 gsave 1.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 154.73181 64.09119
  false NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 128.18544 0.0   false
NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 90.64061 90.64061
  false NArray  /DS 7.0 0. CLW mul add 2 div def /StandardSymL 0. [1.8
0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale
<B4> show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0602 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  181.28123
-90.64061 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def /angleA
134.99999 0.0 c mul 2 div add def /angleB 199.47122 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc  gsave 1.0602 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 154.73181 -64.09119
  false NArray  /DS 4.9476 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 145.882 -103.15555
  false NArray  /DS 4.9476 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 90.64061 -90.64061
  false NArray  /DS 4.9476 0. CLW mul add 2 div def /StandardSymL 0.
[1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.
 scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [ -128.18544
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false Line  gsave
1.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale 1  setgray (b)
show grestore gsave 1.  1.  scale (c) show grestore } bind def   1.
.setopacityalpha  newpath n { transform floor .5 add exch floor .5
add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -128.18544 0.0  
false NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -90.64061 90.64061
  false NArray  /DS 7.0 0. CLW mul add 2 div def /StandardSymL 0. [1.8
0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale
<B4> show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  0.0 218.82301
/y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA 315.00000
0.0 c mul 2 div sub def /angleB 270.00000 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
 gsave 1.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 64.09119 154.73181
  false NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 128.18544   false
NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 30.21454 176.09656
  false NArray  /DS 7.0 0. CLW mul add 2 div def /StandardSymL 0. [1.8
0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale
<B4> show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85751 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  154.73181
-128.18544 /y ED /x ED /r 26.54637 def /c 57.2957 r Div def /angleA
179.99997 0.0 c mul 2 div sub def /angleB 109.47122 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn  gsave 0.85751 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 128.18544 -128.18544
  false NArray  /DS 4.00174 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 145.882 -103.15555
  false NArray  /DS 4.00174 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 146.54453 -123.38976
  false NArray  /DS 4.00174 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  0.0 218.82301
/y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA 225.00000
0.0 c mul 2 div add def /angleB 270.00000 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
 gsave 1.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -64.09119 154.73181
  false NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 128.18544   false
NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -90.64061 90.64061
  false NArray  /DS 7.0 0. CLW mul add 2 div def /StandardSymL 0. [1.8
0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale
<B4> show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0602 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  90.64061
181.28123 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def /angleA
224.99999 0.0 c mul 2 div add def /angleB 289.47122 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc  gsave 1.0602 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 64.09119 154.73181
  false NArray  /DS 4.9476 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 103.15555 145.882
  false NArray  /DS 4.9476 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 90.64061 90.64061
  false NArray  /DS 4.9476 0. CLW mul add 2 div def /StandardSymL 0.
[1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.
 scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.38522 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
128.18544 0.0 181.28123 0.0   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 1.38522 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 181.28123 0.0   false
NArray  /DS 6.46436 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0
0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale 1  setgray
(b) show grestore gsave 1.  1.  scale (c) show grestore } bind def
  1. .setopacityalpha  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 128.18544 0.0   false
NArray  /DS 6.46436 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0
0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b)
show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 176.09656 30.21454
  false NArray  /DS 6.46436 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.10033 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  154.73181
-128.18544 /y ED /x ED /r 26.54941 def /c 57.2957 r Div def /angleA
70.528902 0.0 c mul 2 div sub def /angleB 60.722630 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn  gsave 0.10033 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 163.58162 -103.15555
  false NArray  /DS 0.46817 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 167.71477 -105.02763
  false NArray  /DS 0.46817 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 166.45659 -106.85716
  false NArray  /DS 0.46817 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0602 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  -90.64061
181.28123 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def /angleA
315.00002 0.0 c mul 2 div sub def /angleB 250.52879 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn  gsave 1.0602 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -64.09119 154.73181
  false NArray  /DS 4.9476 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -103.15555 145.882
  false NArray  /DS 4.9476 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -90.64061 165.72722
  false NArray  /DS 4.9476 0. CLW mul add 2 div def /StandardSymL 0.
[1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.
 scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.65631 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  181.28123
-90.64061 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def /angleA
135.00002 0.0 c mul 2 div sub def /angleB 90.000014 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn  gsave 0.65631 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 154.73181 -64.09119
  false NArray  /DS 3.06279 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 181.28123 -53.0958
  false NArray  /DS 3.06279 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 179.29367 -67.4828
  false NArray  /DS 3.06279 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.44537 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  200.05061
0.0 /y ED /x ED /r 18.7724 def /c 57.2957 r Div def /angleA 180.00000
0.0 c mul 2 div add def /angleB 240.72238 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
 gsave 0.44537 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 181.28123 0.0   false
NArray  /DS 2.07841 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0
0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale 1  setgray
(b) show grestore gsave 1.  1.  scale (c) show grestore } bind def
  1. .setopacityalpha  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 190.87257 -16.37457
  false NArray  /DS 2.07841 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 176.09656 -30.21454
  false NArray  /DS 2.07841 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85751 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  128.18544
-154.73181 /y ED /x ED /r 26.54637 def /c 57.2957 r Div def /angleA
90.000020 0.0 c mul 2 div add def /angleB 160.52880 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc  gsave 0.85751 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 128.18544 -128.18544
  false NArray  /DS 4.00174 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 103.15555 -145.882
  false NArray  /DS 4.00174 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 90.64061 -90.64061
  false NArray  /DS 4.00174 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.65631 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  -90.64061
181.28123 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def /angleA
315.00000 0.0 c mul 2 div add def /angleB 0 0.0 c mul 2 div sub def
/angleAtoB angleB angleA gt { true }{ false } ifelse def x y r angleA
angleB arc  gsave 0.65631 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -64.09119 154.73181
  false NArray  /DS 3.06279 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -53.0958 181.28123
  false NArray  /DS 3.06279 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -30.21454 176.09656
  false NArray  /DS 3.06279 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.44537 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  200.05061
0.0 /y ED /x ED /r 18.7724 def /c 57.2957 r Div def /angleA 180.00000
0.0 c mul 2 div sub def /angleB 119.27762 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
 gsave 0.44537 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 181.28123 0.0   false
NArray  /DS 2.07841 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0
0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale 1  setgray
(b) show grestore gsave 1.  1.  scale (c) show grestore } bind def
  1. .setopacityalpha  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 190.87257 16.37457
  false NArray  /DS 2.07841 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 194.3736 7.16006
  false NArray  /DS 2.07841 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.32549 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  154.73181
-128.18544 /y ED /x ED /r 26.54637 def /c 57.2957 r Div def /angleA
179.99998 0.0 c mul 2 div add def /angleB 212.64985 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc  gsave 0.32549 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 128.18544 -128.18544
  false NArray  /DS 1.51897 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 132.37936 -142.50558
  false NArray  /DS 1.51897 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 123.38976 -146.54453
  false NArray  /DS 1.51897 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.65631 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  90.64061
181.28123 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def /angleA
225.00000 0.0 c mul 2 div sub def /angleB 180.00000 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn  gsave 0.65631 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 64.09119 154.73181
  false NArray  /DS 3.06279 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 53.0958 181.28123
  false NArray  /DS 3.06279 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 67.4828 179.29367
  false NArray  /DS 3.06279 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  0.0
218.82301 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA
315.00001 0.0 c mul 2 div add def /angleB 330.72240 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc  gsave 0.5663 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 64.09119 154.73181
  false NArray  /DS 2.64275 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 79.0617 174.498 
 false NArray  /DS 2.64275 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 90.64061 165.72722
  false NArray  /DS 2.64275 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  218.82301
0.0 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA 135.00002
0.0 c mul 2 div sub def /angleB 119.27763 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
 gsave 0.5663 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 154.73181 64.09119
  false NArray  /DS 2.64275 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 174.498 79.0617 
 false NArray  /DS 2.64275 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 179.29367 67.4828
  false NArray  /DS 2.64275 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.65631 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  181.28123
90.64061 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def /angleA 225.00000
0.0 c mul 2 div add def /angleB 270.00000 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
 gsave 0.65631 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 154.73181 64.09119
  false NArray  /DS 3.06279 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 181.28123 53.0958
  false NArray  /DS 3.06279 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 176.09656 30.21454
  false NArray  /DS 3.06279 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.0602 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  181.28123
90.64061 /y ED /x ED /r 37.54482 def /c 57.2957 r Div def /angleA 225.00001
0.0 c mul 2 div sub def /angleB 160.52880 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
 gsave 1.0602 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 154.73181 64.09119
  false NArray  /DS 4.9476 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 145.882 103.15555
  false NArray  /DS 4.9476 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 165.72722 90.64061
  false NArray  /DS 4.9476 0. CLW mul add 2 div def /StandardSymL 0.
[1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.
 scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.5663 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  218.82301
0.0 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA 225.00002
0.0 c mul 2 div add def /angleB 240.72241 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
 gsave 0.5663 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 154.73181 -64.09119
  false NArray  /DS 2.64275 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 174.498 -79.0617
  false NArray  /DS 2.64275 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 165.72722 -90.64061
  false NArray  /DS 2.64275 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.38936 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  154.73181
-128.18544 /y ED /x ED /r 26.54637 def /c 57.2957 r Div def /angleA
70.528820 0.0 c mul 2 div add def /angleB 109.47125 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc  gsave 0.38936 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 163.58162 -103.15555
  false NArray  /DS 1.81703 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 145.882 -103.15555
  false NArray  /DS 1.81703 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 165.72722 -90.64061
  false NArray  /DS 1.81703 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.16745 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  169.25255
-105.15831 /y ED /x ED /r 6.01434 def /c 57.2957 r Div def /angleA
160.52845 0.0 c mul 2 div sub def /angleB 89.999803 0.0 c mul 2 div
add def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arcn  gsave 0.16745 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 163.58162 -103.15555
  false NArray  /DS 0.78145 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 169.25255 -99.14397
  false NArray  /DS 0.78145 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 168.6812 -102.80606
  false NArray  /DS 0.78145 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.32549 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
195.14857 0.0 181.28123 0.0   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 0.32549 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 181.28123 0.0   false
NArray  /DS 1.51897 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0
0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale 1  setgray
(b) show grestore gsave 1.  1.  scale (c) show grestore } bind def
  1. .setopacityalpha  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 195.14857 0.0   false
NArray  /DS 1.51897 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0
0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b)
show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 194.3736 -7.16006
  false NArray  /DS 1.51897 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.12553 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  169.25255
-105.15831 /y ED /x ED /r 6.01434 def /c 57.2957 r Div def /angleA
160.52813 0.0 c mul 2 div add def /angleB 216.86940 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc  gsave 0.12553 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 163.58162 -103.15555
  false NArray  /DS 0.5858 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 164.44168 -108.76874
  false NArray  /DS 0.5858 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 159.79492 -110.8961
  false NArray  /DS 0.5858 0. CLW mul add 2 div def /StandardSymL 0.
[1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.
 scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.85751 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  128.18544
-154.73181 /y ED /x ED /r 26.54637 def /c 57.2957 r Div def /angleA
90.000020 0.0 c mul 2 div add def /angleB 160.52880 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc  gsave 0.85751 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 128.18544 -128.18544
  false NArray  /DS 4.00174 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 103.15555 -145.882
  false NArray  /DS 4.00174 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 90.64061 -90.64061
  false NArray  /DS 4.00174 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  218.82301
0.0 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA 225.00000
0.0 c mul 2 div sub def /angleB 180.00000 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
 gsave 1.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 154.73181 -64.09119
  false NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 128.18544 0.0   false
NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 176.09656 -30.21454
  false NArray  /DS 7.0 0. CLW mul add 2 div def /StandardSymL 0. [1.8
0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale
<B4> show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.38522 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  [
128.18544 0.0 181.28123 0.0   /Lineto /lineto load def 0  setlinejoin
false Line  gsave 1.38522 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 181.28123 0.0   false
NArray  /DS 6.46436 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0
0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale 1  setgray
(b) show grestore gsave 1.  1.  scale (c) show grestore } bind def
  1. .setopacityalpha  newpath n { transform floor .5 add exch floor
.5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 128.18544 0.0   false
NArray  /DS 6.46436 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0
0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b)
show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 176.09656 30.21454
  false NArray  /DS 6.46436 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  218.82301
0.0 /y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA 135.00000
0.0 c mul 2 div add def /angleB 180.00000 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
 gsave 1.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 154.73181 64.09119
  false NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 128.18544 0.0   false
NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 90.64061 90.64061
  false NArray  /DS 7.0 0. CLW mul add 2 div def /StandardSymL 0. [1.8
0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale
<B4> show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  0.0 218.82301
/y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA 315.00000
0.0 c mul 2 div sub def /angleB 270.00000 0.0 c mul 2 div add def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arcn
 gsave 1.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 64.09119 154.73181
  false NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 128.18544   false
NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 30.21454 176.09656
  false NArray  /DS 7.0 0. CLW mul add 2 div def /StandardSymL 0. [1.8
0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale
<B4> show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 1.5 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  0.0 218.82301
/y ED /x ED /r 90.64061 def /c 57.2957 r Div def /angleA 225.00000
0.0 c mul 2 div add def /angleB 270.00000 0.0 c mul 2 div sub def /angleAtoB
angleB angleA gt { true }{ false } ifelse def x y r angleA angleB arc
 gsave 1.5 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0 
setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -64.09119 154.73181
  false NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 128.18544   false
NArray  /DS 7.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -90.64061 90.64061
  false NArray  /DS 7.0 0. CLW mul add 2 div def /StandardSymL 0. [1.8
0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale
<B4> show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.38936 SLW 0  setgray  /ArrowA { moveto } def /ArrowB { } def  154.73181
-128.18544 /y ED /x ED /r 26.54637 def /c 57.2957 r Div def /angleA
70.528820 0.0 c mul 2 div add def /angleB 109.47125 0.0 c mul 2 div
sub def /angleAtoB angleB angleA gt { true }{ false } ifelse def x
y r angleA angleB arc  gsave 0.38936 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 163.58162 -103.15555
  false NArray  /DS 1.81703 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
1  setgray (b) show grestore gsave 1.  1.  scale (c) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 145.882 -103.15555
  false NArray  /DS 1.81703 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 165.72722 -90.64061
  false NArray  /DS 1.81703 0. CLW mul add 2 div def /StandardSymL
0. [1.8 0.0 0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.
 1.  scale <B4> show grestore } bind def   1. .setopacityalpha  newpath
n { transform floor .5 add exch floor .5 add exch itransform Dot }
repeat  end
 
@endspecial 22047 -22047 a
tx@Dict begin { 64.09119 0.0 } PutCoor PutBegin  end
 22047 -22047
a 21653 -21808 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 8.02129 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fa(1)22047 -22047 y
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 0.0 64.09119 } PutCoor PutBegin  end
 22047
-22047 a 21653 -21808 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 8.02129 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fa(2)22047 -22047 y
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 135.08415 -34.68504 } PutCoor PutBegin  end
 22047
-22047 a 21653 -21808 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 8.02129 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fa(3)22047 -22047 y
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { -72.2572 164.1013 } PutCoor PutBegin  end
 22047
-22047 a 21772 -21957 a
 currentpoint currentpoint translate 0.37753616 0.37753616 scale neg
exch neg exch translate
 21772 -21957 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 8.02129 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(4)21772 -21957 y
 currentpoint currentpoint translate 1 0.37753616 div 1 0.37753616
div scale neg exch neg exch translate
 21772 -21957
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 135.64638 -129.25519 } PutCoor PutBegin  end
 22047
-22047 a 21889 -21995 a
 currentpoint currentpoint translate 0.21699503 0.21699503 scale neg
exch neg exch translate
 21889 -21995 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 8.02129 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(5)21889 -21995 y
 currentpoint currentpoint translate 1 0.21699503 div 1 0.21699503
div scale neg exch neg exch translate
 21889 -21995
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 0.0 -64.09119 } PutCoor PutBegin  end
 22047
-22047 a 21653 -21808 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 8.02129 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fa(6)22047 -22047 y
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 135.08415 34.68504 } PutCoor PutBegin  end
 22047
-22047 a 21653 -21808 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 8.02129 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fa(7)22047 -22047 y
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 144.66333 -82.34392 } PutCoor PutBegin  end
 22047
-22047 a 21532 -21878 a
 currentpoint currentpoint translate 0.70680034 0.70680034 scale neg
exch neg exch translate
 21532 -21878 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 8.02129 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(8)21532 -21878 y
 currentpoint currentpoint translate 1 0.70680034 div 1 0.70680034
div scale neg exch neg exch translate
 21532 -21878
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { -64.09119 0.0 } PutCoor PutBegin  end
 22047
-22047 a 21653 -21808 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 8.02129 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fa(9)22047 -22047 y
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 34.68504 135.08415 } PutCoor PutBegin  end
 22047
-22047 a 21376 -21808 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fa(10)22047 -22047 y
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 133.05708 -112.85631 } PutCoor PutBegin  end
 22047
-22047 a 21472 -21910 a
 currentpoint currentpoint translate 0.57167666 0.57167666 scale neg
exch neg exch translate
 21472 -21910 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(11)21472 -21910 y
 currentpoint currentpoint translate 1 0.57167666 div 1 0.57167666
div scale neg exch neg exch translate
 21472 -21910
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { -34.68504 135.08415 } PutCoor PutBegin  end
 22047
-22047 a 21376 -21808 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
Fa(12)22047 -22047 y
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 82.34392 144.66333 } PutCoor PutBegin  end
 22047
-22047 a 21336 -21878 a
 currentpoint currentpoint translate 0.70680034 0.70680034 scale neg
exch neg exch translate
 21336 -21878 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(13)21336 -21878 y
 currentpoint currentpoint translate 1 0.70680034 div 1 0.70680034
div scale neg exch neg exch translate
 21336 -21878
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 154.73181 0.0 } PutCoor PutBegin  end
 22047
-22047 a 21119 -21826 a
 currentpoint currentpoint translate 0.92347915 0.92347915 scale neg
exch neg exch translate
 21119 -21826 a 334 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(14)21119 -21826 y
 currentpoint currentpoint translate 1 0.92347915 div 1 0.92347915
div scale neg exch neg exch translate
 21119 -21826
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 165.68771 -104.00346 } PutCoor PutBegin  end
 22047
-22047 a 21980 -22031 a
 currentpoint currentpoint translate 0.066881093 0.066881093 scale
neg exch neg exch translate
 21980 -22031 a 334 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(15)21980 -22031 y
 currentpoint currentpoint translate 1 0.066881093 div 1 0.066881093
div scale neg exch neg exch translate
 21980 -22031
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { -82.34392 144.66333 } PutCoor PutBegin  end
 22047
-22047 a 21336 -21878 a
 currentpoint currentpoint translate 0.70680034 0.70680034 scale neg
exch neg exch translate
 21336 -21878 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(16)21336 -21878 y
 currentpoint currentpoint translate 1 0.70680034 div 1 0.70680034
div scale neg exch neg exch translate
 21336 -21878
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 166.91246 -55.95253 } PutCoor PutBegin  end
 22047
-22047 a 21607 -21942 a
 currentpoint currentpoint translate 0.43754238 0.43754238 scale neg
exch neg exch translate
 21607 -21942 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(17)21607 -21942 y
 currentpoint currentpoint translate 1 0.43754238 div 1 0.43754238
div scale neg exch neg exch translate
 21607 -21942
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 183.85533 -9.488 } PutCoor PutBegin  end
 22047
-22047 a 21748 -21976 a
 currentpoint currentpoint translate 0.29691553 0.29691553 scale neg
exch neg exch translate
 21748 -21976 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(18)21748 -21976 y
 currentpoint currentpoint translate 1 0.29691553 div 1 0.29691553
div scale neg exch neg exch translate
 21748 -21976
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 112.85631 -133.05708 } PutCoor PutBegin  end
 22047
-22047 a 21472 -21910 a
 currentpoint currentpoint translate 0.57167666 0.57167666 scale neg
exch neg exch translate
 21472 -21910 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(19)21472 -21910 y
 currentpoint currentpoint translate 1 0.57167666 div 1 0.57167666
div scale neg exch neg exch translate
 21472 -21910
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { -55.95253 166.91246 } PutCoor PutBegin  end
 22047
-22047 a 21607 -21942 a
 currentpoint currentpoint translate 0.43754238 0.43754238 scale neg
exch neg exch translate
 21607 -21942 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(20)21607 -21942 y
 currentpoint currentpoint translate 1 0.43754238 div 1 0.43754238
div scale neg exch neg exch translate
 21607 -21942
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 183.85533 9.488 } PutCoor PutBegin  end
 22047
-22047 a 21748 -21976 a
 currentpoint currentpoint translate 0.29691553 0.29691553 scale neg
exch neg exch translate
 21748 -21976 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(21)21748 -21976 y
 currentpoint currentpoint translate 1 0.29691553 div 1 0.29691553
div scale neg exch neg exch translate
 21748 -21976
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 129.25519 -135.64638 } PutCoor PutBegin  end
 22047
-22047 a 21829 -21995 a
 currentpoint currentpoint translate 0.21699503 0.21699503 scale neg
exch neg exch translate
 21829 -21995 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(22)21829 -21995 y
 currentpoint currentpoint translate 1 0.21699503 div 1 0.21699503
div scale neg exch neg exch translate
 21829 -21995
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 55.95253 166.91246 } PutCoor PutBegin  end
 22047
-22047 a 21607 -21942 a
 currentpoint currentpoint translate 0.43754238 0.43754238 scale neg
exch neg exch translate
 21607 -21942 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(23)21607 -21942 y
 currentpoint currentpoint translate 1 0.43754238 div 1 0.43754238
div scale neg exch neg exch translate
 21607 -21942
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 72.2572 164.1013 } PutCoor PutBegin  end
 22047
-22047 a 21667 -21957 a
 currentpoint currentpoint translate 0.37753616 0.37753616 scale neg
exch neg exch translate
 21667 -21957 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(24)21667 -21957 y
 currentpoint currentpoint translate 1 0.37753616 div 1 0.37753616
div scale neg exch neg exch translate
 21667 -21957
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 164.1013 72.2572 } PutCoor PutBegin  end
 22047
-22047 a 21667 -21957 a
 currentpoint currentpoint translate 0.37753616 0.37753616 scale neg
exch neg exch translate
 21667 -21957 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(25)21667 -21957 y
 currentpoint currentpoint translate 1 0.37753616 div 1 0.37753616
div scale neg exch neg exch translate
 21667 -21957
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 166.91246 55.95253 } PutCoor PutBegin  end
 22047
-22047 a 21607 -21942 a
 currentpoint currentpoint translate 0.43754238 0.43754238 scale neg
exch neg exch translate
 21607 -21942 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(26)21607 -21942 y
 currentpoint currentpoint translate 1 0.43754238 div 1 0.43754238
div scale neg exch neg exch translate
 21607 -21942
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 144.66333 82.34392 } PutCoor PutBegin  end
 22047
-22047 a 21336 -21878 a
 currentpoint currentpoint translate 0.70680034 0.70680034 scale neg
exch neg exch translate
 21336 -21878 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(27)21336 -21878 y
 currentpoint currentpoint translate 1 0.70680034 div 1 0.70680034
div scale neg exch neg exch translate
 21336 -21878
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 164.1013 -72.2572 } PutCoor PutBegin  end
 22047
-22047 a 21667 -21957 a
 currentpoint currentpoint translate 0.37753616 0.37753616 scale neg
exch neg exch translate
 21667 -21957 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(28)21667 -21957 y
 currentpoint currentpoint translate 1 0.37753616 div 1 0.37753616
div scale neg exch neg exch translate
 21667 -21957
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 154.73181 -101.63602 } PutCoor PutBegin  end
 22047
-22047 a 21786 -21985 a
 currentpoint currentpoint translate 0.25957580 0.25957580 scale neg
exch neg exch translate
 21786 -21985 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(29)21786 -21985 y
 currentpoint currentpoint translate 1 0.25957580 div 1 0.25957580
div scale neg exch neg exch translate
 21786 -21985
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 165.77888 -100.2502 } PutCoor PutBegin  end
 22047
-22047 a 21935 -22020 a
 currentpoint currentpoint translate 0.11163647 0.11163647 scale neg
exch neg exch translate
 21935 -22020 a 334 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(30)21935 -22020 y
 currentpoint currentpoint translate 1 0.11163647 div 1 0.11163647
div scale neg exch neg exch translate
 21935 -22020
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 188.21338 0.0 } PutCoor PutBegin  end
 22047
-22047 a 21829 -21995 a
 currentpoint currentpoint translate 0.21699503 0.21699503 scale neg
exch neg exch translate
 21829 -21995 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(31)21829 -21995 y
 currentpoint currentpoint translate 1 0.21699503 div 1 0.21699503
div scale neg exch neg exch translate
 21829 -21995
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a 22047 -22047 a
tx@Dict begin { 163.30507 -106.07004 } PutCoor PutBegin  end
 22047
-22047 a 21963 -22027 a
 currentpoint currentpoint translate 0.083686541 0.083686541 scale
neg exch neg exch translate
 21963 -22027 a 335 w @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
 0.02127 SLW 0  setgray  0. true 3.02127 neg 3.02127 neg 13.0213 9.46571
.5 Frame  gsave 3.0 -45 PtoC Shadow 0.25  setgray gsave fill grestore
stroke grestore gsave 0.93  setgray gsave fill grestore stroke grestore
gsave 0.02127 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial Fa(32)21963 -22027 y
 currentpoint currentpoint translate 1 0.083686541 div 1 0.083686541
div scale neg exch neg exch translate
 21963 -22027
a 22047 -22047 a
tx@Dict begin  PutEnd  end
 22047 -22047 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
